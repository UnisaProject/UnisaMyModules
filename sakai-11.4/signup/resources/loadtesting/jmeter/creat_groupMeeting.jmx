<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="1.8">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="create_groupMeeting" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="create_groupMeeting" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1209411044000</longProp>
        <longProp name="ThreadGroup.end_time">1209411044000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Sakai Server URL Setting" enabled="true">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.domain">academicapps1.yu.yale.edu</stringProp>
          <stringProp name="HTTPSampler.path">/portal</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">rfc2109</stringProp>
        </CookieManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="site_id" elementType="Argument">
              <stringProp name="Argument.name">site_id</stringProp>
              <stringProp name="Argument.value">806369e0-46ea-44bb-a976-177e291e9e46</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="page_id" elementType="Argument">
              <stringProp name="Argument.name">page_id</stringProp>
              <stringProp name="Argument.value">af51c814-d6ed-4254-951e-609f096f68fe</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userId" elementType="Argument">
              <stringProp name="Argument.name">userId</stringProp>
              <stringProp name="Argument.value">peterliu</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="start_day" elementType="Argument">
              <stringProp name="Argument.name">start_day</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="start_month" elementType="Argument">
              <stringProp name="Argument.name">start_month</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="start_year" elementType="Argument">
              <stringProp name="Argument.name">start_year</stringProp>
              <stringProp name="Argument.value">2008</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="meeting_title" elementType="Argument">
              <stringProp name="Argument.name">meeting_title</stringProp>
              <stringProp name="Argument.value">Final Exam Review</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">200</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">counter</stringProp>
          <stringProp name="CounterConfig.format">0</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login in" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="/portal/xlogin" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/xlogin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/xlogin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="/portal/xlogin" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/xlogin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eid</stringProp>
                    <stringProp name="Argument.value">${userId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pw</stringProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">submit</stringProp>
                    <stringProp name="Argument.value">Login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/portal/xlogin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Test Course 101 link" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/site/${site_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/site/${site_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/access/site/${site_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/access/site/${site_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/access/site/${site_id}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/access/site/${site_id}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="click syllabus tool link" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/site/${site_id}/page/${page_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/site/${site_id}/page/${page_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tool_id</stringProp>
                <stringProp name="RegexExtractor.regex">/portal/tool/(.+?)\?panel=Main&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/tool/${tool_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">panel</stringProp>
                    <stringProp name="Argument.value">Main</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">site_home_page_id</stringProp>
                <stringProp name="RegexExtractor.regex">/portal/site/${site_id}/page/(.+?)&quot;&gt;&lt;span&gt;Home&lt;/span&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fromItem_id</stringProp>
                <stringProp name="RegexExtractor.regex">document.forms[&apos;addMeeting&apos;][&apos;addMeeting:(.+?)&apos;].value</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">_idcl</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">item_id</stringProp>
                <stringProp name="RegexExtractor.regex">value=&apos;addMeeting:(.+?)&apos;;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">_id2</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add new signupMeeting" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="click add meeting" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">addMeeting</stringProp>
                  <stringProp name="Argument.value">addMeeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">addMeeting:${fromItem_id}</stringProp>
                  <stringProp name="Argument.value">addMeeting:${item_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/signupMeetings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">textarea_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;textarea name=&quot;meeting:(.+?)_textarea&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id37</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">step1_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;meeting:(.+?)&quot; value=&quot;step1&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id38</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="newMeeting/step1" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="step1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:name</stringProp>
                  <stringProp name="Argument.value">${meeting_title} ${counter}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:location</stringProp>
                  <stringProp name="Argument.value">Earle Hall 124</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.day</stringProp>
                  <stringProp name="Argument.value">${start_day}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.month</stringProp>
                  <stringProp name="Argument.value">${start_month}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.year</stringProp>
                  <stringProp name="Argument.value">${start_year}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.hours</stringProp>
                  <stringProp name="Argument.value">9</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.minutes</stringProp>
                  <stringProp name="Argument.value">00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime.ampm</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.day</stringProp>
                  <stringProp name="Argument.value">${start_day}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.month</stringProp>
                  <stringProp name="Argument.value">${start_month}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.year</stringProp>
                  <stringProp name="Argument.value">${start_year}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.hours</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.minutes</stringProp>
                  <stringProp name="Argument.value">00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:endTime.ampm</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${textarea_id}_textarea</stringProp>
                  <stringProp name="Argument.value">&lt;p&gt;testing&lt;/p&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${step1_id}</stringProp>
                  <stringProp name="Argument.value">step1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:goNextPage</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/newMeeting/step1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">radiobtn_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;radio&quot; name=&quot;meeting:(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id4</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">step3_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;meeting:(.+?)&quot; value=&quot;step3&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id25</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="click group meeting in step3" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="click group meeting in step3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${radiobtn_id}</stringProp>
                  <stringProp name="Argument.value">group</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime</stringProp>
                  <stringProp name="Argument.value">1209430840000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:numberOfSlot</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:timeperiod</stringProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:numberOfAttendees</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:currentEndTime</stringProp>
                  <stringProp name="Argument.value">04/28/08 10:00 PM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${step3_id}</stringProp>
                  <stringProp name="Argument.value">step3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/newMeeting/step3</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="step3" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="step3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${radiobtn_id}</stringProp>
                  <stringProp name="Argument.value">group</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:startTime</stringProp>
                  <stringProp name="Argument.value">1209430840000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:groupSubradio</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:maxAttendee</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${step3_id}</stringProp>
                  <stringProp name="Argument.value">step3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:goNextPage</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/newMeeting/step3</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">day_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;select name=&quot;meeting:(.+?)&quot; size=&quot;1&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id7</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">hour_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;meeting:signupDeadline&quot; value=&quot;1&quot; size=&quot;3&quot; /&gt;&lt;select name=&quot;meeting:(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id16</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">step4_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;meeting:(.+?)&quot; value=&quot;step4&quot; /&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id48</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/library/js/headscripts.js" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/library/js/headscripts.js</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/sakai-signup-tool/js/signupScript.js" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sakai-signup-tool/js/signupScript.js</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="step4" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="step4" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:signupBegins</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${day_id}</stringProp>
                  <stringProp name="Argument.value">days</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:signupDeadline</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${hour_id}</stringProp>
                  <stringProp name="Argument.value">hours</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:siteSelection</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${step4_id}</stringProp>
                  <stringProp name="Argument.value">step4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:goNextPage</stringProp>
                  <stringProp name="Argument.value">Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">H4sIAAAAAAAAAN1cW2wc1RmeXduxcyVx4iQlCXESQi4lu157HSdOAsEOSbb4ksZOAvRhmd05Xk8yOzOZORuvi4LgoaUSRUVAWgUoRYWKIqBVVVVtoqqo4oGqhUpFqpBa0dKLVJDavvby0p7/n/ttZ9drx2n9cDIzey7/5ftvZ+bkjb9xbbrGdReVckqvyKkpvkj0VIWKUmpSI2SCapUirWhk3dSmY5uvPNSd5FpHuI7itCgJGpEp1zVynr/Ep2FA+h5N42dHRJ0eGuGWFiVe18f4MqFcp9FH4uVSmk0oyiXWYQmsRHXKrXXNcJLXp0d5lf2cFIWL3CNcsqoy6tZCD4Moe43qY+9vufoO//UWLpHjWnXx86SqchyXmGll7TIdBnPYtkU+TbqfqpTbA8tUTREwgaiKzFhMTdOylDrJmvEKVSt0klQp69yaF4Ve34RLfBPeFj7hmZwxkzlLX81ZoF1h9uyPYWB3DAM52aF/hS6W5Io6REqirPvmbfHNuz2KjwkikSLNUVI2KTzgonqr+eyg71kbe5bpqVLuzhhyjdnHZTJKGKXGZAPVeD2d4mUindCUimoO2l9TbpaEka5em+k7YlYZJbrOl4g1sK8KA3dZt5mwybOxdNzKuq4yNHOM8IIkyqSmbjwyHQh76NcIPjyIxO60bvd7aa8NMzdHvW42U9bDXs90vaDqOGSaKhMFU2NZ17xrrIn8htIWTVecpWTrgt6QokiEl4enSfFCQamycSt1kRLjR1GRw1Ye8DLvh97c/RO0EwCPEiC7Fg19PV4aDlZruKJhRaqUZavrgTp0dYyn/CRfkAD6a4oVDeLABBMLWpzflbRH6qjPMbVPx6x4QuPVabGYKzv21tcXNmU27GG/66FkPdwf1nPApmhvXaFghC8Qe8YDHqH3ZWLt1lo229M4GmIwslah00QDpei1gJL1Oq2sP541D9Z1SIiBjJqUeF1Qth9vi9ZtFm9B98squjWft0vG7rIUuiDvYQt57bPP8IQnLfxn60YAxtKToiAQy3iyB2LCaFy8G1bKZV4WhiqUKjDpspIyxoL1KYZ6FyffZL8sKSlDfPGC/+kwLxeJxEw4o2illM5f4EVVU84zqafO61OuJY0lhnht2Hpk8QC+YkcMnccVDeJ9e5kQypI5NqIvZr2zIpkZVmTKrt0rgqfPQCJQ13DvOIgq3VFODQacVhSqqhWWPX4OM8wU5J+p8QLMf+ipX97/jdX6HinJcZg2JisgxO+xq1b7qoNlnmuczNPMTdvaf/PTt9c/9KsWLnmcWyYpvHCcL1JFy3FL6bRG9GlFEqrq3Uc5+Fsx08Ha1WA0lLvdTe0MKfCqmho+c/r0vWOT+bO5e8/lT4+PT8LiP6yqqmovjmSbkei9bu3RX7/w778nucSDXNslXqqwrDeBMPgRB9nOspOToyP5oXsmcsOU25w2Mom0TGZGDV2ldUrULBMvzL/aYW5EKfISeeSfax56oedff2VJfo7rmGYMFxWBjHDtRaUiU20W1kmy9B9IqjBUmvftl3hN5GWKt1X1P+yPchzlkkSGR2/ZEk3YV468W1zyhqsfBESXZNCkIpVYJbF8AhnqnmTi8KnfEuj46KnxMRBp7tiE32XB7ZvVqoUguP0uNNeguc6KmQAOAUhMGU1ykIDHP/O7SrhdCc3rNkkZpNBN0uZQkkxbclOWDLla0gCNXNU1gc9ozKLtzffP/uWTLQ+fsI2GmhikXAdLAgSiEcGZhAEsIoWeoDwlJ5mdMDfNXyLaAz///pFnXnhvNAlgcgpHE13LdNZHwDHeUtI0ZZDdNm/5SqTUWaBrSJQFRniurDK0DJb1EvvpEqMgTzRN0fIM8RrVL3fveBjvzYT+TG6IWVrK/QhF9hE0f6LcxqjOZk1oq9VS4Wq3FLD6UtFlX8dOUIohIVY9YUuQC9Ho+kaxtsTBWic0OWjug+Z5aF6E5jXEn+XOEZGR9KPvV8HVbGPmJolFHiJ6urpvZmZm3xT7cV9Fk4gMfkNQ/X8hwGzEjDwQhavfwhVcfAjN71zYcytsk0vx6P7yKpNzHl2Kp+Md28bIjOFhTHeJyuVlmbm/IimzCSZnVYbCFaaoBiGDsEVryevWUJOdhOXcMghT79Ym1Lsemt3QoGNDHB6F5kQ1TG4Jr8gSzUsia+MrFDlY3fnCWo65sRLROv/40iv/eOzxA0nYyzHDmhWesN9YpVwg2hffuLJl+bMfPYH+51FGNC4DWFxJxbJZlrHKBFhJrAJIGRYW+GOUmXQDF0YtE4POObtSj7w/jJD3RjdEUez5Am7MeCXcb+v5mu1APvZ6kxiANROrNkFzB/oKN1H7bdxZal/jVTvsw8QEKgf3yxZUzuGwdu+EsZLF4s392OY/SvDeBp9d96UfJim+ApuhXRR4lkCyHEwunWZoJ2etR05SysxmlWMO0PPQE39+6t2v7Pg9s5nPWDYDuL8FhcS1fIzEoCkc5Mw/fFRFE3CoVA1zcdmT+8/Ljc+qakJt85x06oNfiwO/bmi2Q3N7tEOLUvzOWMUH/dkA4j3Sn+GmpFtAXjBcd4Tpuw0Xr0eeLSHybJ+jPbCCmNXCZdyriJBOJ7ofCXrky6JcYaWzVxQHbAVcs4h1UQ65gzGqNiLmygEAbzKC9NUu0qeViuYj/KANmnDC23DMjSf7FhfZAj/LqF7pojqDEfz2aLJbYczCefo7oUmjp/eQheVJjwfiiV0LVoTUZdgbUJAFwlJPkrdyPF6jPsp7bbbmGjlXhTAUzYZfcpglpt2+ZK3Xlxi5P/zmCzPXzf6d7iIhJ8ObgTAnUpOHhVXFpmASI5jvMHp94sBUsbcZdTQDb8xY7g7CG9Orow3Ce3FTF0vAkyK8aF3vTV2sN0g2z80nLyCSAVdactFJL/7/Mo5BaA5Dc9d8ZRxufRkZhweBBjK9CBz5X0gyLtaIdaHZhYftAVvaYeEO5n7gpsgsPEQfsNERRXTMXs4i5BWYDt1Vi+aLC+d2j0FzPOB2ezGhOOEF/SJnFV3BrILIgo/ujM3UouQUvRg/j3vl9mVc3efs7SbxZMMpw0JId7snUaAkj2+08ywfEhlyRUmksz5WMX26z8sqN++baW0OVsehOQfNFDT45uO5IHQxj3neS9dKNSS+2aEsYQEj6KMTa90ctS1SKm2oxXytj+rx8dxvyycK9pRbM6XIdN8MEUvTdLCgSMKhBUzn8J3Z2aBy9ts6bMCv3Dp/6ZyxM025DkHUYYvR/W7ELfc9oZmC68OKlI47m0TwDMuEZ4TucbwkKTNEmFSGNYKvT7qcBNH1GYstRKs2WeeuTeyvXxpPQximXOTY6+3ecyg+O7nx9UsmXg/4K16aLyQ9gMM05my4ZZjxlqFBUuQShbdANVndYl8tbdQ0XC87hcbz1mydUsB93XMar6oEUqNPWYIIfBBkO9HQ7WFj8912j4bDNG7hPXLIDyECaKXc3sj1B3sHfV9MaVEfDkzYbxp3f/H9z36w/MoDSa71QW6lBG/H8Y3iBKHGi3dRGOFW6ZVCWaTMMPE3oO0PI+ZeLN5UVS4BVlCDuB4/cWxg8v7YYZkaw3ZHD4sahHv6Zndjw75miRYVs8LejjcO2gK68q3RXOCHaghvl2Ut3Dv6PDR8PURhel1Y7IgDWk1HxJout5LD48qWbZ4+gRhSN7xs2dnCSO5vspa9aWLFbV45Oh7RCgy1kdKHNQ9fM1SAvI7Nc9bU7qD6PDRlaBRoLkKD/XDOaiCd6sNyZ7YGuNub1oJ/yV6bUI+UKNd/WFd5uVsUjuwS4aPQcZXIeeebx13dOp2VyJFdLPNSJX52UGb+fdddDt7iwLOhAUcWJLvPFm1oyLM+Y12dRtr1tMKoT5XEKcq1wqUX5vDN8bQyc4xQVh3pu/fYtkC55QVFE4iG3M2zPfhZytpA8Wmi/XAaVNGAbJsjpN8Gq4+QbT5IDEuKTtyYuGHq32+bkuP4XmKdOi19F4E0wdB4G954VQ4DXnb7vOQrC6zeAdvwPVKFpd+oX2xdC+py17vKU1QrFqe+Ha4+zAuqkbZnfLHt+6PcWvQXLBOUFO3I9oLEFy9sZwrzPa2Q7QC0QG3bzXy8rmiDApniKxI9FCenZvakL0PzNWiuBl005h/P1XDRYVu+TSEn22MT5bPHvYcF8RKa4zz65fmpir7aeFW0NbQqcjhjMLOkYn99bmvKcQOnm610OijXF1iIVTjOV/GDUV/cW+VByPhMI+N3Bcf3DEacN7DGZIJjmlsxE7fizuCYmBEhq/TGjQmRZU/9nOFXv+DEbni15apuvgTNFfQlG4Lc4MkKtBkHyDH1TDOl1hegebwWMb02zTdriYVHxMJLq65teui2XH1gtQXUXD0FH6jC5Gd0/wI36b5clx6+9xaBEMy+Hw9EJO8n1x1EEI2TsDcg3jzbeLzZ6OLZt9O2uZYvRWO+ITGnoZjRHzO+p+kZMnOJew346ngKeucyQ8/8zhAvhbgZ4jQBrrmttNhbhM9giNheM6vAc4NofqGha753CZ+C5uk66cIq9pmbOYoZp4zDw9j6baXwrcHG0zxbcs3FNPj3rZsxdm0oRW0QxoME9xGeDg9k9e8RNlfe4cbA1QANlFtyOM3quwZKt8T8oTdBufaCcbQrQux7a77EYgm3cXA3J08pPoZx/+BFh2HKdbr3D8wDv+AE8SiRD5lBoNaUSePl/8vQfAuaVwPlfxbL/9fctAePItknf2tvCmwJwc/8WYXxaZXM0q98AemBj8RMRpwzzza/oZowT0kb8zJzCpwAHCV0WhFcRwBtYlrxADUs46FqXRhomIxv2/FwKJyMKS7bc7S85l6h0zzYQcbsw7fxq1U0rtN98HIYzkIeen39B9/5xXsPXrXOXSYuadwWtyxwUyx1D3rUe+G67+gJsfiTd96GERq3Odj3OFxj13PvPn+8fOQTOEcywrWr07xOcgLlNiEV1TQOSuOg9Cnjx0Nsyi7n6DDOYpzFHHly6djG8uVvJw1PsjdCcEHJXPY6bJ+rj3TsTI/GK9g6k/iFwLLxdWNJKfDFCzaaVzlohnP6ttHavqHlVTUCN+6j/XNHJkxxWZ2bVIGkHy+6RIv4fxkEJWr8HwfoAeuU6Erm+xiIdWNkXYLdGSFYz0yXnUh8rQn5/hcoSVPXgksAAA==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/newMeeting/step4</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">email_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;checkbox&quot; name=&quot;meeting:(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id52</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">step5_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;meeting:(.+?)&quot; value=&quot;step5&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id59</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="step5" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="publish meetings" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${email_id}</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${step5_id}</stringProp>
                  <stringProp name="Argument.value">step5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:goNextPage</stringProp>
                  <stringProp name="Argument.value">Publish</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/newMeeting/step5</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="view meetings page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/signupMeetings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1375249336">${meeting_title} ${counter}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <stringProp name="Assertion.assume_success">false</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="logout" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/logout</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
