<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="1.8">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Signup to join the group meeting" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Signup to join the group meeting" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numberOfThread_to_run}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1209501473000</longProp>
        <longProp name="ThreadGroup.end_time">1209501473000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Sakai Server URL Setting" enabled="true">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.domain">academicapps1.yu.yale.edu</stringProp>
          <stringProp name="HTTPSampler.path">/portal</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="site_id" elementType="Argument">
              <stringProp name="Argument.name">site_id</stringProp>
              <stringProp name="Argument.value">806369e0-46ea-44bb-a976-177e291e9e46</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="page_id" elementType="Argument">
              <stringProp name="Argument.name">page_id</stringProp>
              <stringProp name="Argument.value">af51c814-d6ed-4254-951e-609f096f68fe</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="meetingTitle" elementType="Argument">
              <stringProp name="Argument.name">meetingTitle</stringProp>
              <stringProp name="Argument.value">Final Exam Review</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numberOfThread_to_run" elementType="Argument">
              <stringProp name="Argument.name">numberOfThread_to_run</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rowNum_groupMeeting_count_start_from_0" elementType="Argument">
              <stringProp name="Argument.name">rowNum_groupMeeting_count_start_from_0</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">rfc2109</stringProp>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-836030906">userId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1855554937">
              <stringProp name="-1146272093">tester-1</stringProp>
            </collectionProp>
            <collectionProp name="-1855554973">
              <stringProp name="-1146272092">tester-2</stringProp>
            </collectionProp>
            <collectionProp name="-1855555009">
              <stringProp name="-1146272091">tester-3</stringProp>
            </collectionProp>
            <collectionProp name="-1855555045">
              <stringProp name="-1146272090">tester-4</stringProp>
            </collectionProp>
            <collectionProp name="-1855555858">
              <stringProp name="-1146272089">tester-5</stringProp>
            </collectionProp>
            <collectionProp name="-1855555894">
              <stringProp name="-1146272088">tester-6</stringProp>
            </collectionProp>
            <collectionProp name="-1855555930">
              <stringProp name="-1146272087">tester-7</stringProp>
            </collectionProp>
            <collectionProp name="-1855555966">
              <stringProp name="-1146272086">tester-8</stringProp>
            </collectionProp>
            <collectionProp name="-1855556002">
              <stringProp name="-1146272085">tester-9</stringProp>
            </collectionProp>
            <collectionProp name="1353679505">
              <stringProp name="-1174696467">tester-10</stringProp>
            </collectionProp>
            <collectionProp name="1353679469">
              <stringProp name="-1174696466">tester-11</stringProp>
            </collectionProp>
            <collectionProp name="1353679433">
              <stringProp name="-1174696465">tester-12</stringProp>
            </collectionProp>
            <collectionProp name="1353679397">
              <stringProp name="-1174696464">tester-13</stringProp>
            </collectionProp>
            <collectionProp name="1353679361">
              <stringProp name="-1174696463">tester-14</stringProp>
            </collectionProp>
            <collectionProp name="1353679325">
              <stringProp name="-1174696462">tester-15</stringProp>
            </collectionProp>
            <collectionProp name="1353679289">
              <stringProp name="-1174696461">tester-16</stringProp>
            </collectionProp>
            <collectionProp name="1353679253">
              <stringProp name="-1174696460">tester-17</stringProp>
            </collectionProp>
            <collectionProp name="1353678440">
              <stringProp name="-1174696459">tester-18</stringProp>
            </collectionProp>
            <collectionProp name="1353678404">
              <stringProp name="-1174696458">tester-19</stringProp>
            </collectionProp>
            <collectionProp name="1353676058">
              <stringProp name="-1174696436">tester-20</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
            <name>saveConfig</name>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login in" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login page" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/xlogin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/xlogin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="submit login data" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/xlogin" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eid</stringProp>
                    <stringProp name="Argument.value">${userId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pw</stringProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">submit</stringProp>
                    <stringProp name="Argument.value">Login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/portal/xlogin</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Test Course" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/site/${site_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/site/${site_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/access/site/${site_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/access/site/${site_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="click sign-up tool link" enabled="true"/>
          <hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="sign-up tool main page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/site/${site_id}/page/${page_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">tool_id</stringProp>
                <stringProp name="RegexExtractor.regex">/portal/tool/(.+?)\?panel=Main&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="/portal/tool/${tool_id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">panel</stringProp>
                    <stringProp name="Argument.value">Main</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.mimetype"></stringProp>
              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
              <stringProp name="HTTPSampler.monitor">false</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">site_home_page_id</stringProp>
                <stringProp name="RegexExtractor.regex">/portal/site/${site_id}/page/(.+?)&quot;&gt;&lt;span&gt;Home&lt;/span&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">addButtonName</stringProp>
                <stringProp name="RegexExtractor.regex">document.forms[&apos;addMeeting&apos;][&apos;addMeeting:(.+?)&apos;].value</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">addButtonValue</stringProp>
                <stringProp name="RegexExtractor.regex">].value=&apos;addMeeting:(.+?)&apos;;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="go testing site" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="go to test site" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/site/${site_id}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="go to testing tool" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="sign-up tool main page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/site/${site_id}/page/${page_id}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">formItem_id</stringProp>
              <stringProp name="RegexExtractor.regex">document.forms[&apos;items&apos;][&apos;items:(.+?)&apos;].value</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_idcl</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">item_id</stringProp>
              <stringProp name="RegexExtractor.regex">value=&apos;items:meetinglist:0:(.+?)&apos;;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id29</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="main signupMeetings page" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="main page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">items:viewByRange</stringProp>
                  <stringProp name="Argument.value">10000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">items</stringProp>
                  <stringProp name="Argument.value">items</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">items:${formItem_id}</stringProp>
                  <stringProp name="Argument.value">items:meetinglist:${rowNum_groupMeeting_count_start_from_0}:${item_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/signupMeetings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="attendee view signupMeeting page" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="meeting page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/attendee/signupMeeting</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <stringProp name="groupSize">${numberOfThread_to_run}</stringProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="click signup button" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="click sign-up button" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:timeslots:0:addMe</stringProp>
                  <stringProp name="Argument.value">Sign Up</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/attendee/signupMeeting</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">textarea_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;textarea name=&quot;meeting:(.+?)_textarea&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">_id14</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="submit signup" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="click finish button to sign up" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:${textarea_id}_textarea</stringProp>
                  <stringProp name="Argument.value">&lt;p&gt;testing&lt;/p&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:save</stringProp>
                  <stringProp name="Argument.value">Finish</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/attendee/addSignupAttendee</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1655574689">The time slot has already been taken</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <stringProp name="Assertion.assume_success">false</stringProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="view sign-up result" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/attendee/signupMeeting</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="attendee meeting view page" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="click back button" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">meeting:goBack</stringProp>
                  <stringProp name="Argument.value">Back</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">com.sun.faces.VIEW</stringProp>
                  <stringProp name="Argument.value">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</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">meeting</stringProp>
                  <stringProp name="Argument.value">meeting</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/attendee/signupMeeting</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="back to main page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/tool/${tool_id}/signupMeetings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="logout" enabled="true"/>
        <hashTree>
          <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="logout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/logout</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.mimetype"></stringProp>
            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
            <stringProp name="HTTPSampler.monitor">false</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
