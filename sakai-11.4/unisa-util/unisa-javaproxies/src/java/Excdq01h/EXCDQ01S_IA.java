package Excdq01h;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                            CA Gen r8
//
//           Copyright (c) 2012 CA. All rights reserved.
//
//    Name: EXCDQ01S_IA                      Date: 2012/05/15
//    User: Tanderw                          Time: 15:10:33
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen80.vwrt.*;
import com.ca.gen80.vwrt.types.*;
import com.ca.gen80.vwrt.vdf.*;
import com.ca.gen80.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: EXCDQ01S_IA
 **/
public class EXCDQ01S_IA extends ViewBase implements IImportView, Serializable
{
  static VDF localVdf = null;
  
  // Entity View: IN
  //        Type: EXAM_PAPER_COVER_DOCKET
  /**
   * Attribute missing flag for: InExamPaperCoverDocketContactPersNr
   **/
  public char InExamPaperCoverDocketContactPersNr_AS;
  /**
   * Attribute for: InExamPaperCoverDocketContactPersNr
   **/
  public int InExamPaperCoverDocketContactPersNr;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketBookRequired
   **/
  public char InExamPaperCoverDocketBookRequired_AS;
  /**
   * Attribute for: InExamPaperCoverDocketBookRequired
   **/
  public String InExamPaperCoverDocketBookRequired;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketProofReadRequest
   **/
  public char InExamPaperCoverDocketProofReadRequest_AS;
  /**
   * Attribute for: InExamPaperCoverDocketProofReadRequest
   **/
  public String InExamPaperCoverDocketProofReadRequest;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketStatusGc41
   **/
  public char InExamPaperCoverDocketStatusGc41_AS;
  /**
   * Attribute for: InExamPaperCoverDocketStatusGc41
   **/
  public String InExamPaperCoverDocketStatusGc41;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketTotalRackPages
   **/
  public char InExamPaperCoverDocketTotalRackPages_AS;
  /**
   * Attribute for: InExamPaperCoverDocketTotalRackPages
   **/
  public short InExamPaperCoverDocketTotalRackPages;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketTotalPages
   **/
  public char InExamPaperCoverDocketTotalPages_AS;
  /**
   * Attribute for: InExamPaperCoverDocketTotalPages
   **/
  public short InExamPaperCoverDocketTotalPages;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketAnnexurePages
   **/
  public char InExamPaperCoverDocketAnnexurePages_AS;
  /**
   * Attribute for: InExamPaperCoverDocketAnnexurePages
   **/
  public String InExamPaperCoverDocketAnnexurePages;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketMemorandumIncl
   **/
  public char InExamPaperCoverDocketMemorandumIncl_AS;
  /**
   * Attribute for: InExamPaperCoverDocketMemorandumIncl
   **/
  public String InExamPaperCoverDocketMemorandumIncl;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketDeclarationFlag
   **/
  public char InExamPaperCoverDocketDeclarationFlag_AS;
  /**
   * Attribute for: InExamPaperCoverDocketDeclarationFlag
   **/
  public String InExamPaperCoverDocketDeclarationFlag;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketFillInPaperGc50
   **/
  public char InExamPaperCoverDocketFillInPaperGc50_AS;
  /**
   * Attribute for: InExamPaperCoverDocketFillInPaperGc50
   **/
  public String InExamPaperCoverDocketFillInPaperGc50;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketOpenBookGc50
   **/
  public char InExamPaperCoverDocketOpenBookGc50_AS;
  /**
   * Attribute for: InExamPaperCoverDocketOpenBookGc50
   **/
  public String InExamPaperCoverDocketOpenBookGc50;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketKeepPaperFlag
   **/
  public char InExamPaperCoverDocketKeepPaperFlag_AS;
  /**
   * Attribute for: InExamPaperCoverDocketKeepPaperFlag
   **/
  public String InExamPaperCoverDocketKeepPaperFlag;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketCalcPermitFlag
   **/
  public char InExamPaperCoverDocketCalcPermitFlag_AS;
  /**
   * Attribute for: InExamPaperCoverDocketCalcPermitFlag
   **/
  public String InExamPaperCoverDocketCalcPermitFlag;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketExaminerPrtGc107
   **/
  public char InExamPaperCoverDocketExaminerPrtGc107_AS;
  /**
   * Attribute for: InExamPaperCoverDocketExaminerPrtGc107
   **/
  public String InExamPaperCoverDocketExaminerPrtGc107;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketMcqInstrFlag
   **/
  public char InExamPaperCoverDocketMcqInstrFlag_AS;
  /**
   * Attribute for: InExamPaperCoverDocketMcqInstrFlag
   **/
  public String InExamPaperCoverDocketMcqInstrFlag;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketAttendRegFlag
   **/
  public char InExamPaperCoverDocketAttendRegFlag_AS;
  /**
   * Attribute for: InExamPaperCoverDocketAttendRegFlag
   **/
  public String InExamPaperCoverDocketAttendRegFlag;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketPaperColour
   **/
  public char InExamPaperCoverDocketPaperColour_AS;
  /**
   * Attribute for: InExamPaperCoverDocketPaperColour
   **/
  public String InExamPaperCoverDocketPaperColour;
  /**
   * Attribute missing flag for: InExamPaperCoverDocketNrDocsSubmitted
   **/
  public char InExamPaperCoverDocketNrDocsSubmitted_AS;
  /**
   * Attribute for: InExamPaperCoverDocketNrDocsSubmitted
   **/
  public short InExamPaperCoverDocketNrDocsSubmitted;
  // Entity View: IN
  //        Type: EXAM_PAPER_LOG
  /**
   * Attribute missing flag for: InExamPaperLogActionGc39
   **/
  public char InExamPaperLogActionGc39_AS;
  /**
   * Attribute for: InExamPaperLogActionGc39
   **/
  public String InExamPaperLogActionGc39;
  /**
   * Attribute missing flag for: InExamPaperLogUpdatedBy
   **/
  public char InExamPaperLogUpdatedBy_AS;
  /**
   * Attribute for: InExamPaperLogUpdatedBy
   **/
  public String InExamPaperLogUpdatedBy;
  // Entity View: IN
  //        Type: WS_USER_STUDY_UNIT
  /**
   * Attribute missing flag for: InWsUserStudyUnitNovellUserId
   **/
  public char InWsUserStudyUnitNovellUserId_AS;
  /**
   * Attribute for: InWsUserStudyUnitNovellUserId
   **/
  public String InWsUserStudyUnitNovellUserId;
  // Entity View: IN
  //        Type: EXAM_PAPER_DETAILS
  /**
   * Attribute missing flag for: InExamPaperDetailsExamYear
   **/
  public char InExamPaperDetailsExamYear_AS;
  /**
   * Attribute for: InExamPaperDetailsExamYear
   **/
  public short InExamPaperDetailsExamYear;
  /**
   * Attribute missing flag for: InExamPaperDetailsMkStudyUnitCode
   **/
  public char InExamPaperDetailsMkStudyUnitCode_AS;
  /**
   * Attribute for: InExamPaperDetailsMkStudyUnitCode
   **/
  public String InExamPaperDetailsMkStudyUnitCode;
  /**
   * Attribute missing flag for: InExamPaperDetailsNr
   **/
  public char InExamPaperDetailsNr_AS;
  /**
   * Attribute for: InExamPaperDetailsNr
   **/
  public short InExamPaperDetailsNr;
  /**
   * Attribute missing flag for: InExamPaperDetailsNrOfPages
   **/
  public char InExamPaperDetailsNrOfPages_AS;
  /**
   * Attribute for: InExamPaperDetailsNrOfPages
   **/
  public short InExamPaperDetailsNrOfPages;
  // Entity View: IN
  //        Type: EXAM_PERIOD_DATE
  /**
   * Attribute missing flag for: InExamPeriodDateMkExamPeriodCode
   **/
  public char InExamPeriodDateMkExamPeriodCode_AS;
  /**
   * Attribute for: InExamPeriodDateMkExamPeriodCode
   **/
  public short InExamPeriodDateMkExamPeriodCode;
  /**
   * Attribute missing flag for: InExamPeriodDateMarkreadingCode
   **/
  public char InExamPeriodDateMarkreadingCode_AS;
  /**
   * Attribute for: InExamPeriodDateMarkreadingCode
   **/
  public String InExamPeriodDateMarkreadingCode;
  /**
   * Attribute missing flag for: InExamPeriodDateScriptMarkTot
   **/
  public char InExamPeriodDateScriptMarkTot_AS;
  /**
   * Attribute for: InExamPeriodDateScriptMarkTot
   **/
  public short InExamPeriodDateScriptMarkTot;
  /**
   * Attribute missing flag for: InExamPeriodDateMarkreadTot
   **/
  public char InExamPeriodDateMarkreadTot_AS;
  /**
   * Attribute for: InExamPeriodDateMarkreadTot
   **/
  public short InExamPeriodDateMarkreadTot;
  /**
   * Attribute missing flag for: InExamPeriodDatePaperMarkTot
   **/
  public char InExamPeriodDatePaperMarkTot_AS;
  /**
   * Attribute for: InExamPeriodDatePaperMarkTot
   **/
  public short InExamPeriodDatePaperMarkTot;
  // Entity View: IN
  //        Type: CSF_CLIENT_SERVER_COMMUNICATIONS
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsReturnCode
   **/
  public char InCsfClientServerCommunicationsReturnCode_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsReturnCode
   **/
  public short InCsfClientServerCommunicationsReturnCode;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsServerVersionNumber
   **/
  public char InCsfClientServerCommunicationsServerVersionNumber_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerVersionNumber
   **/
  public short InCsfClientServerCommunicationsServerVersionNumber;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsServerRevisionNumber
   **/
  public char InCsfClientServerCommunicationsServerRevisionNumber_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerRevisionNumber
   **/
  public short InCsfClientServerCommunicationsServerRevisionNumber;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsServerDevelopmentPhase
   **/
  public char InCsfClientServerCommunicationsServerDevelopmentPhase_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerDevelopmentPhase
   **/
  public String InCsfClientServerCommunicationsServerDevelopmentPhase;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsAction
   **/
  public char InCsfClientServerCommunicationsAction_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsAction
   **/
  public String InCsfClientServerCommunicationsAction;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsClientIsGuiFlag
   **/
  public char InCsfClientServerCommunicationsClientIsGuiFlag_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientIsGuiFlag
   **/
  public String InCsfClientServerCommunicationsClientIsGuiFlag;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsServerDate
   **/
  public char InCsfClientServerCommunicationsServerDate_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerDate
   **/
  public int InCsfClientServerCommunicationsServerDate;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsServerTime
   **/
  public char InCsfClientServerCommunicationsServerTime_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerTime
   **/
  public int InCsfClientServerCommunicationsServerTime;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsServerTimestamp
   **/
  public char InCsfClientServerCommunicationsServerTimestamp_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerTimestamp
   **/
  public String InCsfClientServerCommunicationsServerTimestamp;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsServerTransactionCode
   **/
  public char InCsfClientServerCommunicationsServerTransactionCode_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerTransactionCode
   **/
  public String InCsfClientServerCommunicationsServerTransactionCode;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsServerUserId
   **/
  public char InCsfClientServerCommunicationsServerUserId_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerUserId
   **/
  public String InCsfClientServerCommunicationsServerUserId;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsServerRollbackFlag
   **/
  public char InCsfClientServerCommunicationsServerRollbackFlag_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsServerRollbackFlag
   **/
  public String InCsfClientServerCommunicationsServerRollbackFlag;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsClientVersionNumber
   **/
  public char InCsfClientServerCommunicationsClientVersionNumber_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientVersionNumber
   **/
  public short InCsfClientServerCommunicationsClientVersionNumber;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsClientRevisionNumber
   **/
  public char InCsfClientServerCommunicationsClientRevisionNumber_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientRevisionNumber
   **/
  public short InCsfClientServerCommunicationsClientRevisionNumber;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsClientDevelopmentPhase
   **/
  public char InCsfClientServerCommunicationsClientDevelopmentPhase_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientDevelopmentPhase
   **/
  public String InCsfClientServerCommunicationsClientDevelopmentPhase;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsClientDate
   **/
  public char InCsfClientServerCommunicationsClientDate_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientDate
   **/
  public int InCsfClientServerCommunicationsClientDate;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsClientTime
   **/
  public char InCsfClientServerCommunicationsClientTime_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientTime
   **/
  public int InCsfClientServerCommunicationsClientTime;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsClientTimestamp
   **/
  public char InCsfClientServerCommunicationsClientTimestamp_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientTimestamp
   **/
  public String InCsfClientServerCommunicationsClientTimestamp;
  /**
   * Attribute missing flag for: 
    InCsfClientServerCommunicationsClientTransactionCode
   **/
  public char InCsfClientServerCommunicationsClientTransactionCode_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientTransactionCode
   **/
  public String InCsfClientServerCommunicationsClientTransactionCode;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsClientUserId
   **/
  public char InCsfClientServerCommunicationsClientUserId_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsClientUserId
   **/
  public String InCsfClientServerCommunicationsClientUserId;
  /**
   * Attribute missing flag for: InCsfClientServerCommunicationsFirstpassFlag
   **/
  public char InCsfClientServerCommunicationsFirstpassFlag_AS;
  /**
   * Attribute for: InCsfClientServerCommunicationsFirstpassFlag
   **/
  public String InCsfClientServerCommunicationsFirstpassFlag;
  // Repeating GV:  IN_EXAM_STATIONARY_GROUP
  //     Repeats: 20 times
  /**
   * Repeating group view count
   **/
  public int InExamStationaryGroup_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char InExamStationaryGroup_AC[] = new char[20];
  // Entity View: IN_G
  //        Type: EXAM_STATIONERY
  /**
   * Attribute missing flag for: InGExamStationeryItemCode
   **/
  public char InGExamStationeryItemCode_AS[] = new char[20];
  /**
   * Attribute for: InGExamStationeryItemCode
   **/
  public String InGExamStationeryItemCode[] = new String[20];
  // Entity View: IN_G
  //        Type: EXAM_PAPER_STATIONERY_NEEDS
  /**
   * Attribute missing flag for: InGExamPaperStationeryNeedsAveragePerStudent
   **/
  public char InGExamPaperStationeryNeedsAveragePerStudent_AS[] = new char[20];
  /**
   * Attribute for: InGExamPaperStationeryNeedsAveragePerStudent
   **/
  public double InGExamPaperStationeryNeedsAveragePerStudent[] = new double[20]
    ;
  // Repeating GV:  IN_EXAM_INSTRUCTION_GROUP
  //     Repeats: 25 times
  /**
   * Repeating group view count
   **/
  public int InExamInstructionGroup_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char InExamInstructionGroup_AC[] = new char[25];
  // Entity View: IN_G
  //        Type: EXAM_DATE_INSTRUCTION
  /**
   * Attribute missing flag for: InGExamDateInstructionMkDocumentParagraphCode
   **/
  public char InGExamDateInstructionMkDocumentParagraphCode_AS[] = new char[25]
    ;
  /**
   * Attribute for: InGExamDateInstructionMkDocumentParagraphCode
   **/
  public short InGExamDateInstructionMkDocumentParagraphCode[] = new short[25];
  /**
   * Attribute missing flag for: InGExamDateInstructionMkWidthType
   **/
  public char InGExamDateInstructionMkWidthType_AS[] = new char[25];
  /**
   * Attribute for: InGExamDateInstructionMkWidthType
   **/
  public String InGExamDateInstructionMkWidthType[] = new String[25];
  /**
   * Attribute missing flag for: InGExamDateInstructionMkContents
   **/
  public char InGExamDateInstructionMkContents_AS[] = new char[25];
  /**
   * Attribute for: InGExamDateInstructionMkContents
   **/
  public String InGExamDateInstructionMkContents[] = new String[25];
  // Repeating GV:  IN_PAPER_LANGUAGE_GROUP
  //     Repeats: 10 times
  /**
   * Repeating group view count
   **/
  public int InPaperLanguageGroup_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char InPaperLanguageGroup_AC[] = new char[10];
  // Entity View: IN_G
  //        Type: EXAM_PAPER_LANGUAGE
  /**
   * Attribute missing flag for: InGExamPaperLanguageLanguageGc40
   **/
  public char InGExamPaperLanguageLanguageGc40_AS[] = new char[10];
  /**
   * Attribute for: InGExamPaperLanguageLanguageGc40
   **/
  public String InGExamPaperLanguageLanguageGc40[] = new String[10];
  // Repeating GV:  IN_ADDITIONAL_INSTR_GROUP
  //     Repeats: 20 times
  /**
   * Repeating group view count
   **/
  public int InAdditionalInstrGroup_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char InAdditionalInstrGroup_AC[] = new char[20];
  // Entity View: IN_G
  //        Type: EXAM_PAPER_ADD_INSTRUCTIONS
  /**
   * Attribute missing flag for: InGExamPaperAddInstructionsInstructionNr
   **/
  public char InGExamPaperAddInstructionsInstructionNr_AS[] = new char[20];
  /**
   * Attribute for: InGExamPaperAddInstructionsInstructionNr
   **/
  public short InGExamPaperAddInstructionsInstructionNr[] = new short[20];
  /**
   * Attribute missing flag for: InGExamPaperAddInstructionsInstruction
   **/
  public char InGExamPaperAddInstructionsInstruction_AS[] = new char[20];
  /**
   * Attribute for: InGExamPaperAddInstructionsInstruction
   **/
  public String InGExamPaperAddInstructionsInstruction[] = new String[20];
  // Entity View: IN
  //        Type: WS_ADDRESS_V2
  /**
   * Attribute missing flag for: InWsAddressV2CellNumber
   **/
  public char InWsAddressV2CellNumber_AS;
  /**
   * Attribute for: InWsAddressV2CellNumber
   **/
  public String InWsAddressV2CellNumber;
  /**
   * Attribute missing flag for: InWsAddressV2HomeNumber
   **/
  public char InWsAddressV2HomeNumber_AS;
  /**
   * Attribute for: InWsAddressV2HomeNumber
   **/
  public String InWsAddressV2HomeNumber;
  /**
   * Attribute missing flag for: InWsAddressV2WorkNumber
   **/
  public char InWsAddressV2WorkNumber_AS;
  /**
   * Attribute for: InWsAddressV2WorkNumber
   **/
  public String InWsAddressV2WorkNumber;
  /**
   * Default Constructor
   **/
  
  public EXCDQ01S_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public EXCDQ01S_IA(EXCDQ01S_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static EXCDQ01S_IA getInstance()
  {
    return new EXCDQ01S_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new EXCDQ01S_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    InExamPaperCoverDocketContactPersNr_AS = ' ';
    InExamPaperCoverDocketContactPersNr = 0;
    InExamPaperCoverDocketBookRequired_AS = ' ';
    InExamPaperCoverDocketBookRequired = "";
    InExamPaperCoverDocketProofReadRequest_AS = ' ';
    InExamPaperCoverDocketProofReadRequest = "";
    InExamPaperCoverDocketStatusGc41_AS = ' ';
    InExamPaperCoverDocketStatusGc41 = "";
    InExamPaperCoverDocketTotalRackPages_AS = ' ';
    InExamPaperCoverDocketTotalRackPages = 0;
    InExamPaperCoverDocketTotalPages_AS = ' ';
    InExamPaperCoverDocketTotalPages = 0;
    InExamPaperCoverDocketAnnexurePages_AS = ' ';
    InExamPaperCoverDocketAnnexurePages = "";
    InExamPaperCoverDocketMemorandumIncl_AS = ' ';
    InExamPaperCoverDocketMemorandumIncl = "";
    InExamPaperCoverDocketDeclarationFlag_AS = ' ';
    InExamPaperCoverDocketDeclarationFlag = "";
    InExamPaperCoverDocketFillInPaperGc50_AS = ' ';
    InExamPaperCoverDocketFillInPaperGc50 = "";
    InExamPaperCoverDocketOpenBookGc50_AS = ' ';
    InExamPaperCoverDocketOpenBookGc50 = "";
    InExamPaperCoverDocketKeepPaperFlag_AS = ' ';
    InExamPaperCoverDocketKeepPaperFlag = "";
    InExamPaperCoverDocketCalcPermitFlag_AS = ' ';
    InExamPaperCoverDocketCalcPermitFlag = "";
    InExamPaperCoverDocketExaminerPrtGc107_AS = ' ';
    InExamPaperCoverDocketExaminerPrtGc107 = "          ";
    InExamPaperCoverDocketMcqInstrFlag_AS = ' ';
    InExamPaperCoverDocketMcqInstrFlag = " ";
    InExamPaperCoverDocketAttendRegFlag_AS = ' ';
    InExamPaperCoverDocketAttendRegFlag = " ";
    InExamPaperCoverDocketPaperColour_AS = ' ';
    InExamPaperCoverDocketPaperColour = "          ";
    InExamPaperCoverDocketNrDocsSubmitted_AS = ' ';
    InExamPaperCoverDocketNrDocsSubmitted = 0;
    InExamPaperLogActionGc39_AS = ' ';
    InExamPaperLogActionGc39 = "";
    InExamPaperLogUpdatedBy_AS = ' ';
    InExamPaperLogUpdatedBy = "";
    InWsUserStudyUnitNovellUserId_AS = ' ';
    InWsUserStudyUnitNovellUserId = "          ";
    InExamPaperDetailsExamYear_AS = ' ';
    InExamPaperDetailsExamYear = 0;
    InExamPaperDetailsMkStudyUnitCode_AS = ' ';
    InExamPaperDetailsMkStudyUnitCode = "       ";
    InExamPaperDetailsNr_AS = ' ';
    InExamPaperDetailsNr = 0;
    InExamPaperDetailsNrOfPages_AS = ' ';
    InExamPaperDetailsNrOfPages = 0;
    InExamPeriodDateMkExamPeriodCode_AS = ' ';
    InExamPeriodDateMkExamPeriodCode = 0;
    InExamPeriodDateMarkreadingCode_AS = ' ';
    InExamPeriodDateMarkreadingCode = "";
    InExamPeriodDateScriptMarkTot_AS = ' ';
    InExamPeriodDateScriptMarkTot = 0;
    InExamPeriodDateMarkreadTot_AS = ' ';
    InExamPeriodDateMarkreadTot = 0;
    InExamPeriodDatePaperMarkTot_AS = ' ';
    InExamPeriodDatePaperMarkTot = 0;
    InCsfClientServerCommunicationsReturnCode_AS = ' ';
    InCsfClientServerCommunicationsReturnCode = 0;
    InCsfClientServerCommunicationsServerVersionNumber_AS = ' ';
    InCsfClientServerCommunicationsServerVersionNumber = 0;
    InCsfClientServerCommunicationsServerRevisionNumber_AS = ' ';
    InCsfClientServerCommunicationsServerRevisionNumber = 0;
    InCsfClientServerCommunicationsServerDevelopmentPhase_AS = ' ';
    InCsfClientServerCommunicationsServerDevelopmentPhase = " ";
    InCsfClientServerCommunicationsAction_AS = ' ';
    InCsfClientServerCommunicationsAction = "  ";
    InCsfClientServerCommunicationsClientIsGuiFlag_AS = ' ';
    InCsfClientServerCommunicationsClientIsGuiFlag = " ";
    InCsfClientServerCommunicationsServerDate_AS = ' ';
    InCsfClientServerCommunicationsServerDate = 00000000;
    InCsfClientServerCommunicationsServerTime_AS = ' ';
    InCsfClientServerCommunicationsServerTime = 00000000;
    InCsfClientServerCommunicationsServerTimestamp_AS = ' ';
    InCsfClientServerCommunicationsServerTimestamp = "00000000000000000000";
    InCsfClientServerCommunicationsServerTransactionCode_AS = ' ';
    InCsfClientServerCommunicationsServerTransactionCode = "        ";
    InCsfClientServerCommunicationsServerUserId_AS = ' ';
    InCsfClientServerCommunicationsServerUserId = "        ";
    InCsfClientServerCommunicationsServerRollbackFlag_AS = ' ';
    InCsfClientServerCommunicationsServerRollbackFlag = " ";
    InCsfClientServerCommunicationsClientVersionNumber_AS = ' ';
    InCsfClientServerCommunicationsClientVersionNumber = 0;
    InCsfClientServerCommunicationsClientRevisionNumber_AS = ' ';
    InCsfClientServerCommunicationsClientRevisionNumber = 0;
    InCsfClientServerCommunicationsClientDevelopmentPhase_AS = ' ';
    InCsfClientServerCommunicationsClientDevelopmentPhase = " ";
    InCsfClientServerCommunicationsClientDate_AS = ' ';
    InCsfClientServerCommunicationsClientDate = 00000000;
    InCsfClientServerCommunicationsClientTime_AS = ' ';
    InCsfClientServerCommunicationsClientTime = 00000000;
    InCsfClientServerCommunicationsClientTimestamp_AS = ' ';
    InCsfClientServerCommunicationsClientTimestamp = "00000000000000000000";
    InCsfClientServerCommunicationsClientTransactionCode_AS = ' ';
    InCsfClientServerCommunicationsClientTransactionCode = "        ";
    InCsfClientServerCommunicationsClientUserId_AS = ' ';
    InCsfClientServerCommunicationsClientUserId = "        ";
    InCsfClientServerCommunicationsFirstpassFlag_AS = ' ';
    InCsfClientServerCommunicationsFirstpassFlag = " ";
    InExamStationaryGroup_MA = 0;
    for(int a = 0; a < 20; a++)
    {
      InExamStationaryGroup_AC[a] = ' ';
      InGExamStationeryItemCode_AS[a] = ' ';
      InGExamStationeryItemCode[a] = "  ";
      InGExamPaperStationeryNeedsAveragePerStudent_AS[a] = ' ';
      InGExamPaperStationeryNeedsAveragePerStudent[a] = 0.0;
    }
    InExamInstructionGroup_MA = 0;
    for(int a = 0; a < 25; a++)
    {
      InExamInstructionGroup_AC[a] = ' ';
      InGExamDateInstructionMkDocumentParagraphCode_AS[a] = ' ';
      InGExamDateInstructionMkDocumentParagraphCode[a] = 0;
      InGExamDateInstructionMkWidthType_AS[a] = ' ';
      InGExamDateInstructionMkWidthType[a] = " ";
      InGExamDateInstructionMkContents_AS[a] = ' ';
      InGExamDateInstructionMkContents[a] = "  ";
    }
    InPaperLanguageGroup_MA = 0;
    for(int a = 0; a < 10; a++)
    {
      InPaperLanguageGroup_AC[a] = ' ';
      InGExamPaperLanguageLanguageGc40_AS[a] = ' ';
      InGExamPaperLanguageLanguageGc40[a] = "";
    }
    InAdditionalInstrGroup_MA = 0;
    for(int a = 0; a < 20; a++)
    {
      InAdditionalInstrGroup_AC[a] = ' ';
      InGExamPaperAddInstructionsInstructionNr_AS[a] = ' ';
      InGExamPaperAddInstructionsInstructionNr[a] = 0;
      InGExamPaperAddInstructionsInstruction_AS[a] = ' ';
      InGExamPaperAddInstructionsInstruction[a] = "";
    }
    InWsAddressV2CellNumber_AS = ' ';
    InWsAddressV2CellNumber = "                    ";
    InWsAddressV2HomeNumber_AS = ' ';
    InWsAddressV2HomeNumber = "                            ";
    InWsAddressV2WorkNumber_AS = ' ';
    InWsAddressV2WorkNumber = "                            ";
  }
  /**
   * Gets the VDF array for the instance, initialized.
   **/
  
  public static VDF getViewDefinition()
  {
    if ( localVdf == null )
    {
      VDFEntry [] vdfEntries = {
        new VDFEntry((int)1, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "ContactPersNr", VDFEntry.TYPE_INT, (short)1, 
          (short)0, 8, (short)0, null), 
        new VDFEntry((int)2, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "BookRequired", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)3, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "ProofReadRequest", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)4, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "StatusGc41", VDFEntry.TYPE_STRING, (short)1, 
          (short)0, 10, (short)0, null), 
        new VDFEntry((int)5, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "TotalRackPages", VDFEntry.TYPE_SHORT, (short)
          1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)6, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "TotalPages", VDFEntry.TYPE_SHORT, (short)1, (
          short)0, 2, (short)0, null), 
        new VDFEntry((int)7, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "AnnexurePages", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)8, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "MemorandumIncl", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)9, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "DeclarationFlag", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)10, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "FillInPaperGc50", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)11, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "OpenBookGc50", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)12, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "KeepPaperFlag", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)13, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "CalcPermitFlag", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)14, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "ExaminerPrtGc107", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 10, (short)0, null), 
        new VDFEntry((int)15, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "McqInstrFlag", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)16, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "AttendRegFlag", VDFEntry.TYPE_STRING, (short)
          1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)17, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "PaperColour", VDFEntry.TYPE_STRING, (short)1,
           (short)0, 10, (short)0, null), 
        new VDFEntry((int)18, "", "InExamPaperCoverDocket", 
          "ExamPaperCoverDocket", "NrDocsSubmitted", VDFEntry.TYPE_SHORT, (
          short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)19, "", "InExamPaperLog", "ExamPaperLog", "ActionGc39"
          , VDFEntry.TYPE_STRING, (short)1, (short)0, 10, (short)0, null), 
        new VDFEntry((int)20, "", "InExamPaperLog", "ExamPaperLog", "UpdatedBy",
           VDFEntry.TYPE_STRING, (short)1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)21, "", "InWsUserStudyUnit", "WsUserStudyUnit", 
          "NovellUserId", VDFEntry.TYPE_STRING, (short)1, (short)0, 10, (short)
          0, null), 
        new VDFEntry((int)22, "", "InExamPaperDetails", "ExamPaperDetails", 
          "ExamYear", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, 
          null), 
        new VDFEntry((int)23, "", "InExamPaperDetails", "ExamPaperDetails", 
          "MkStudyUnitCode", VDFEntry.TYPE_STRING, (short)1, (short)0, 7, (
          short)0, null), 
        new VDFEntry((int)24, "", "InExamPaperDetails", "ExamPaperDetails", "Nr"
          , VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)25, "", "InExamPaperDetails", "ExamPaperDetails", 
          "NrOfPages", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, 
          null), 
        new VDFEntry((int)26, "", "InExamPeriodDate", "ExamPeriodDate", 
          "MkExamPeriodCode", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (
          short)0, null), 
        new VDFEntry((int)27, "", "InExamPeriodDate", "ExamPeriodDate", 
          "MarkreadingCode", VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (
          short)0, null), 
        new VDFEntry((int)28, "", "InExamPeriodDate", "ExamPeriodDate", 
          "ScriptMarkTot", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0,
           null), 
        new VDFEntry((int)29, "", "InExamPeriodDate", "ExamPeriodDate", 
          "MarkreadTot", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, 
          null), 
        new VDFEntry((int)30, "", "InExamPeriodDate", "ExamPeriodDate", 
          "PaperMarkTot", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, 
          null), 
        new VDFEntry((int)31, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ReturnCode", VDFEntry.TYPE_SHORT, (
          short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)32, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerVersionNumber", 
          VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)33, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerRevisionNumber", 
          VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)34, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerDevelopmentPhase", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)35, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "Action", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)36, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientIsGuiFlag", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)37, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerDate", VDFEntry.TYPE_DATE, (
          short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)38, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerTime", VDFEntry.TYPE_TIME, (
          short)1, (short)0, 6, (short)0, null), 
        new VDFEntry((int)39, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerTimestamp", 
          VDFEntry.TYPE_TIMESTAMP, (short)1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)40, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerTransactionCode", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)41, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerUserId", VDFEntry.TYPE_STRING,
           (short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)42, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ServerRollbackFlag", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)43, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientVersionNumber", 
          VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)44, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientRevisionNumber", 
          VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (short)0, null), 
        new VDFEntry((int)45, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientDevelopmentPhase", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)46, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientDate", VDFEntry.TYPE_DATE, (
          short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)47, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientTime", VDFEntry.TYPE_TIME, (
          short)1, (short)0, 6, (short)0, null), 
        new VDFEntry((int)48, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientTimestamp", 
          VDFEntry.TYPE_TIMESTAMP, (short)1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)49, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientTransactionCode", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)50, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "ClientUserId", VDFEntry.TYPE_STRING,
           (short)1, (short)0, 8, (short)0, null), 
        new VDFEntry((int)51, "", "InCsfClientServerCommunications", 
          "CsfClientServerCommunications", "FirstpassFlag", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)52, "InExamStationaryGroup", "", "", "MA", 
          VDFEntry.TYPE_INT, (short)1, (short)0, 4, (short)0, null), 
        new VDFEntry((int)53, "InExamStationaryGroup", "", "", "AC", 
          VDFEntry.TYPE_CHAR, (short)20, (short)0, 1, (short)0, null), 
        new VDFEntry((int)54, "InExamStationaryGroup", "InGExamStationery", 
          "ExamStationery", "ItemCode", VDFEntry.TYPE_STRING, (short)20, (short)
          0, 2, (short)0, null), 
        new VDFEntry((int)55, "InExamStationaryGroup", 
          "InGExamPaperStationeryNeeds", "ExamPaperStationeryNeeds", 
          "AveragePerStudent", VDFEntry.TYPE_DOUBLE, (short)20, (short)0, 4, (
          short)2, null), 
        new VDFEntry((int)56, "InExamInstructionGroup", "", "", "MA", 
          VDFEntry.TYPE_INT, (short)1, (short)0, 4, (short)0, null), 
        new VDFEntry((int)57, "InExamInstructionGroup", "", "", "AC", 
          VDFEntry.TYPE_CHAR, (short)25, (short)0, 1, (short)0, null), 
        new VDFEntry((int)58, "InExamInstructionGroup", "InGExamDateInstruction"
          , "ExamDateInstruction", "MkDocumentParagraphCode", 
          VDFEntry.TYPE_SHORT, (short)25, (short)0, 2, (short)0, null), 
        new VDFEntry((int)59, "InExamInstructionGroup", "InGExamDateInstruction"
          , "ExamDateInstruction", "MkWidthType", VDFEntry.TYPE_STRING, (short)
          25, (short)0, 1, (short)0, null), 
        new VDFEntry((int)60, "InExamInstructionGroup", "InGExamDateInstruction"
          , "ExamDateInstruction", "MkContents", VDFEntry.TYPE_STRING, (short)
          25, (short)0, 2, (short)0, null), 
        new VDFEntry((int)61, "InPaperLanguageGroup", "", "", "MA", 
          VDFEntry.TYPE_INT, (short)1, (short)0, 4, (short)0, null), 
        new VDFEntry((int)62, "InPaperLanguageGroup", "", "", "AC", 
          VDFEntry.TYPE_CHAR, (short)10, (short)0, 1, (short)0, null), 
        new VDFEntry((int)63, "InPaperLanguageGroup", "InGExamPaperLanguage", 
          "ExamPaperLanguage", "LanguageGc40", VDFEntry.TYPE_STRING, (short)10, 
          (short)0, 10, (short)0, null), 
        new VDFEntry((int)64, "InAdditionalInstrGroup", "", "", "MA", 
          VDFEntry.TYPE_INT, (short)1, (short)0, 4, (short)0, null), 
        new VDFEntry((int)65, "InAdditionalInstrGroup", "", "", "AC", 
          VDFEntry.TYPE_CHAR, (short)20, (short)0, 1, (short)0, null), 
        new VDFEntry((int)66, "InAdditionalInstrGroup", 
          "InGExamPaperAddInstructions", "ExamPaperAddInstructions", 
          "InstructionNr", VDFEntry.TYPE_SHORT, (short)20, (short)0, 2, (short)
          0, null), 
        new VDFEntry((int)67, "InAdditionalInstrGroup", 
          "InGExamPaperAddInstructions", "ExamPaperAddInstructions", 
          "Instruction", VDFEntry.TYPE_STRING, (short)20, (short)0, 132, (short)
          0, null), 
        new VDFEntry((int)68, "", "InWsAddressV2", "WsAddressV2", "CellNumber", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)69, "", "InWsAddressV2", "WsAddressV2", "HomeNumber", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 28, (short)0, null), 
        new VDFEntry((int)70, "", "InWsAddressV2", "WsAddressV2", "WorkNumber", 
          VDFEntry.TYPE_STRING, (short)1, (short)0, 28, (short)0, null), 
      };
      localVdf = new VDF(vdfEntries);
    }
    try {
      VDF result = (VDF)localVdf.clone();
      result.initViewData();
      return result;
    } catch( CloneNotSupportedException e ) {
      return null;
    }
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    VDF vdf = getViewDefinition();
    // predicate view item
    vdf.getEntries()[0].getDataValue().setObject(new Integer(
      InExamPaperCoverDocketContactPersNr));
    // predicate view item
    vdf.getEntries()[1].getDataValue().setObject(
      InExamPaperCoverDocketBookRequired);
    // predicate view item
    vdf.getEntries()[2].getDataValue().setObject(
      InExamPaperCoverDocketProofReadRequest);
    // predicate view item
    vdf.getEntries()[3].getDataValue().setObject(
      InExamPaperCoverDocketStatusGc41);
    // predicate view item
    vdf.getEntries()[4].getDataValue().setObject(new Short(
      InExamPaperCoverDocketTotalRackPages));
    // predicate view item
    vdf.getEntries()[5].getDataValue().setObject(new Short(
      InExamPaperCoverDocketTotalPages));
    // predicate view item
    vdf.getEntries()[6].getDataValue().setObject(
      InExamPaperCoverDocketAnnexurePages);
    // predicate view item
    vdf.getEntries()[7].getDataValue().setObject(
      InExamPaperCoverDocketMemorandumIncl);
    // predicate view item
    vdf.getEntries()[8].getDataValue().setObject(
      InExamPaperCoverDocketDeclarationFlag);
    // predicate view item
    vdf.getEntries()[9].getDataValue().setObject(
      InExamPaperCoverDocketFillInPaperGc50);
    // predicate view item
    vdf.getEntries()[10].getDataValue().setObject(
      InExamPaperCoverDocketOpenBookGc50);
    // predicate view item
    vdf.getEntries()[11].getDataValue().setObject(
      InExamPaperCoverDocketKeepPaperFlag);
    // predicate view item
    vdf.getEntries()[12].getDataValue().setObject(
      InExamPaperCoverDocketCalcPermitFlag);
    // predicate view item
    vdf.getEntries()[13].getDataValue().setObject(
      InExamPaperCoverDocketExaminerPrtGc107);
    // predicate view item
    vdf.getEntries()[14].getDataValue().setObject(
      InExamPaperCoverDocketMcqInstrFlag);
    // predicate view item
    vdf.getEntries()[15].getDataValue().setObject(
      InExamPaperCoverDocketAttendRegFlag);
    // predicate view item
    vdf.getEntries()[16].getDataValue().setObject(
      InExamPaperCoverDocketPaperColour);
    // predicate view item
    vdf.getEntries()[17].getDataValue().setObject(new Short(
      InExamPaperCoverDocketNrDocsSubmitted));
    // predicate view item
    vdf.getEntries()[18].getDataValue().setObject(InExamPaperLogActionGc39);
    // predicate view item
    vdf.getEntries()[19].getDataValue().setObject(InExamPaperLogUpdatedBy);
    // predicate view item
    vdf.getEntries()[20].getDataValue().setObject(InWsUserStudyUnitNovellUserId)
      ;
    // predicate view item
    vdf.getEntries()[21].getDataValue().setObject(new Short(
      InExamPaperDetailsExamYear));
    // predicate view item
    vdf.getEntries()[22].getDataValue().setObject(
      InExamPaperDetailsMkStudyUnitCode);
    // predicate view item
    vdf.getEntries()[23].getDataValue().setObject(new Short(
      InExamPaperDetailsNr));
    // predicate view item
    vdf.getEntries()[24].getDataValue().setObject(new Short(
      InExamPaperDetailsNrOfPages));
    // predicate view item
    vdf.getEntries()[25].getDataValue().setObject(new Short(
      InExamPeriodDateMkExamPeriodCode));
    // predicate view item
    vdf.getEntries()[26].getDataValue().setObject(
      InExamPeriodDateMarkreadingCode);
    // predicate view item
    vdf.getEntries()[27].getDataValue().setObject(new Short(
      InExamPeriodDateScriptMarkTot));
    // predicate view item
    vdf.getEntries()[28].getDataValue().setObject(new Short(
      InExamPeriodDateMarkreadTot));
    // predicate view item
    vdf.getEntries()[29].getDataValue().setObject(new Short(
      InExamPeriodDatePaperMarkTot));
    // predicate view item
    vdf.getEntries()[30].getDataValue().setObject(new Short(
      InCsfClientServerCommunicationsReturnCode));
    // predicate view item
    vdf.getEntries()[31].getDataValue().setObject(new Short(
      InCsfClientServerCommunicationsServerVersionNumber));
    // predicate view item
    vdf.getEntries()[32].getDataValue().setObject(new Short(
      InCsfClientServerCommunicationsServerRevisionNumber));
    // predicate view item
    vdf.getEntries()[33].getDataValue().setObject(
      InCsfClientServerCommunicationsServerDevelopmentPhase);
    // predicate view item
    vdf.getEntries()[34].getDataValue().setObject(
      InCsfClientServerCommunicationsAction);
    // predicate view item
    vdf.getEntries()[35].getDataValue().setObject(
      InCsfClientServerCommunicationsClientIsGuiFlag);
    // predicate view item
    vdf.getEntries()[36].getDataValue().setObject(new Integer(
      InCsfClientServerCommunicationsServerDate));
    // predicate view item
    vdf.getEntries()[37].getDataValue().setObject(new Integer(
      InCsfClientServerCommunicationsServerTime));
    // predicate view item
    vdf.getEntries()[38].getDataValue().setObject(
      InCsfClientServerCommunicationsServerTimestamp);
    // predicate view item
    vdf.getEntries()[39].getDataValue().setObject(
      InCsfClientServerCommunicationsServerTransactionCode);
    // predicate view item
    vdf.getEntries()[40].getDataValue().setObject(
      InCsfClientServerCommunicationsServerUserId);
    // predicate view item
    vdf.getEntries()[41].getDataValue().setObject(
      InCsfClientServerCommunicationsServerRollbackFlag);
    // predicate view item
    vdf.getEntries()[42].getDataValue().setObject(new Short(
      InCsfClientServerCommunicationsClientVersionNumber));
    // predicate view item
    vdf.getEntries()[43].getDataValue().setObject(new Short(
      InCsfClientServerCommunicationsClientRevisionNumber));
    // predicate view item
    vdf.getEntries()[44].getDataValue().setObject(
      InCsfClientServerCommunicationsClientDevelopmentPhase);
    // predicate view item
    vdf.getEntries()[45].getDataValue().setObject(new Integer(
      InCsfClientServerCommunicationsClientDate));
    // predicate view item
    vdf.getEntries()[46].getDataValue().setObject(new Integer(
      InCsfClientServerCommunicationsClientTime));
    // predicate view item
    vdf.getEntries()[47].getDataValue().setObject(
      InCsfClientServerCommunicationsClientTimestamp);
    // predicate view item
    vdf.getEntries()[48].getDataValue().setObject(
      InCsfClientServerCommunicationsClientTransactionCode);
    // predicate view item
    vdf.getEntries()[49].getDataValue().setObject(
      InCsfClientServerCommunicationsClientUserId);
    // predicate view item
    vdf.getEntries()[50].getDataValue().setObject(
      InCsfClientServerCommunicationsFirstpassFlag);
    // group view current cardinality
    vdf.getEntries()[51].getDataValue().setObject(new Integer(
      InExamStationaryGroup_MA));
    // group view active flags
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      if ( adim0 < InExamStationaryGroup_MA )
      {
        ((VDFEntryObject [])vdf.getEntries()[52].getDataValue().getObject())[
          adim0].setObject(new Character('Y'));
      }
      else 
      {
        ((VDFEntryObject [])vdf.getEntries()[52].getDataValue().getObject())[
          adim0].setObject(new Character('N'));
      }
    }
    vdf.getEntries()[52].setCountUsed((short)InExamStationaryGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[53].getDataValue().getObject())[
        adim0].setObject(InGExamStationeryItemCode[adim0]);
    }
    vdf.getEntries()[53].setCountUsed((short)InExamStationaryGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[54].getDataValue().getObject())[
        adim0].setObject(new Double(
        InGExamPaperStationeryNeedsAveragePerStudent[adim0]));
    }
    vdf.getEntries()[54].setCountUsed((short)InExamStationaryGroup_MA);
    // group view current cardinality
    vdf.getEntries()[55].getDataValue().setObject(new Integer(
      InExamInstructionGroup_MA));
    // group view active flags
    for(int adim0 = 0; adim0 < 25; adim0++)
    {
      if ( adim0 < InExamInstructionGroup_MA )
      {
        ((VDFEntryObject [])vdf.getEntries()[56].getDataValue().getObject())[
          adim0].setObject(new Character('Y'));
      }
      else 
      {
        ((VDFEntryObject [])vdf.getEntries()[56].getDataValue().getObject())[
          adim0].setObject(new Character('N'));
      }
    }
    vdf.getEntries()[56].setCountUsed((short)InExamInstructionGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 25; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[57].getDataValue().getObject())[
        adim0].setObject(new Short(
        InGExamDateInstructionMkDocumentParagraphCode[adim0]));
    }
    vdf.getEntries()[57].setCountUsed((short)InExamInstructionGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 25; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[58].getDataValue().getObject())[
        adim0].setObject(InGExamDateInstructionMkWidthType[adim0]);
    }
    vdf.getEntries()[58].setCountUsed((short)InExamInstructionGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 25; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[59].getDataValue().getObject())[
        adim0].setObject(InGExamDateInstructionMkContents[adim0]);
    }
    vdf.getEntries()[59].setCountUsed((short)InExamInstructionGroup_MA);
    // group view current cardinality
    vdf.getEntries()[60].getDataValue().setObject(new Integer(
      InPaperLanguageGroup_MA));
    // group view active flags
    for(int adim0 = 0; adim0 < 10; adim0++)
    {
      if ( adim0 < InPaperLanguageGroup_MA )
      {
        ((VDFEntryObject [])vdf.getEntries()[61].getDataValue().getObject())[
          adim0].setObject(new Character('Y'));
      }
      else 
      {
        ((VDFEntryObject [])vdf.getEntries()[61].getDataValue().getObject())[
          adim0].setObject(new Character('N'));
      }
    }
    vdf.getEntries()[61].setCountUsed((short)InPaperLanguageGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 10; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[62].getDataValue().getObject())[
        adim0].setObject(InGExamPaperLanguageLanguageGc40[adim0]);
    }
    vdf.getEntries()[62].setCountUsed((short)InPaperLanguageGroup_MA);
    // group view current cardinality
    vdf.getEntries()[63].getDataValue().setObject(new Integer(
      InAdditionalInstrGroup_MA));
    // group view active flags
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      if ( adim0 < InAdditionalInstrGroup_MA )
      {
        ((VDFEntryObject [])vdf.getEntries()[64].getDataValue().getObject())[
          adim0].setObject(new Character('Y'));
      }
      else 
      {
        ((VDFEntryObject [])vdf.getEntries()[64].getDataValue().getObject())[
          adim0].setObject(new Character('N'));
      }
    }
    vdf.getEntries()[64].setCountUsed((short)InAdditionalInstrGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[65].getDataValue().getObject())[
        adim0].setObject(new Short(InGExamPaperAddInstructionsInstructionNr[
        adim0]));
    }
    vdf.getEntries()[65].setCountUsed((short)InAdditionalInstrGroup_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 20; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[66].getDataValue().getObject())[
        adim0].setObject(InGExamPaperAddInstructionsInstruction[adim0]);
    }
    vdf.getEntries()[66].setCountUsed((short)InAdditionalInstrGroup_MA);
    // predicate view item
    vdf.getEntries()[67].getDataValue().setObject(InWsAddressV2CellNumber);
    // predicate view item
    vdf.getEntries()[68].getDataValue().setObject(InWsAddressV2HomeNumber);
    // predicate view item
    vdf.getEntries()[69].getDataValue().setObject(InWsAddressV2WorkNumber);
    return(vdf);
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    // predicate view item
    if ( vdf.getEntries()[0].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketContactPersNr = ((Integer)vdf.getEntries()[0]
        .getDataValue().getObject()).intValue();
    }
    else 
    {
      InExamPaperCoverDocketContactPersNr = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[1].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketBookRequired = ((String)vdf.getEntries()[1]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketBookRequired = "";
    }
    // predicate view item
    if ( vdf.getEntries()[2].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketProofReadRequest = ((String)vdf.getEntries()[2]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketProofReadRequest = "";
    }
    // predicate view item
    if ( vdf.getEntries()[3].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketStatusGc41 = ((String)vdf.getEntries()[3]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketStatusGc41 = "";
    }
    // predicate view item
    if ( vdf.getEntries()[4].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketTotalRackPages = ((Short)vdf.getEntries()[4]
        .getDataValue().getObject()).shortValue();
    }
    else 
    {
      InExamPaperCoverDocketTotalRackPages = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[5].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketTotalPages = ((Short)vdf.getEntries()[5]
        .getDataValue().getObject()).shortValue();
    }
    else 
    {
      InExamPaperCoverDocketTotalPages = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[6].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketAnnexurePages = ((String)vdf.getEntries()[6]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketAnnexurePages = "";
    }
    // predicate view item
    if ( vdf.getEntries()[7].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketMemorandumIncl = ((String)vdf.getEntries()[7]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketMemorandumIncl = "";
    }
    // predicate view item
    if ( vdf.getEntries()[8].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketDeclarationFlag = ((String)vdf.getEntries()[8]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketDeclarationFlag = "";
    }
    // predicate view item
    if ( vdf.getEntries()[9].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketFillInPaperGc50 = ((String)vdf.getEntries()[9]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketFillInPaperGc50 = "";
    }
    // predicate view item
    if ( vdf.getEntries()[10].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketOpenBookGc50 = ((String)vdf.getEntries()[10]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketOpenBookGc50 = "";
    }
    // predicate view item
    if ( vdf.getEntries()[11].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketKeepPaperFlag = ((String)vdf.getEntries()[11]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketKeepPaperFlag = "";
    }
    // predicate view item
    if ( vdf.getEntries()[12].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketCalcPermitFlag = ((String)vdf.getEntries()[12]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketCalcPermitFlag = "";
    }
    // predicate view item
    if ( vdf.getEntries()[13].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketExaminerPrtGc107 = ((String)vdf.getEntries()[13]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketExaminerPrtGc107 = "          ";
    }
    // predicate view item
    if ( vdf.getEntries()[14].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketMcqInstrFlag = ((String)vdf.getEntries()[14]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketMcqInstrFlag = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[15].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketAttendRegFlag = ((String)vdf.getEntries()[15]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketAttendRegFlag = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[16].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketPaperColour = ((String)vdf.getEntries()[16]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperCoverDocketPaperColour = "          ";
    }
    // predicate view item
    if ( vdf.getEntries()[17].getDataValue().getObject() != null )
    {
      InExamPaperCoverDocketNrDocsSubmitted = ((Short)vdf.getEntries()[17]
        .getDataValue().getObject()).shortValue();
    }
    else 
    {
      InExamPaperCoverDocketNrDocsSubmitted = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[18].getDataValue().getObject() != null )
    {
      InExamPaperLogActionGc39 = ((String)vdf.getEntries()[18].getDataValue()
        .getObject());
    }
    else 
    {
      InExamPaperLogActionGc39 = "";
    }
    // predicate view item
    if ( vdf.getEntries()[19].getDataValue().getObject() != null )
    {
      InExamPaperLogUpdatedBy = ((String)vdf.getEntries()[19].getDataValue()
        .getObject());
    }
    else 
    {
      InExamPaperLogUpdatedBy = "";
    }
    // predicate view item
    if ( vdf.getEntries()[20].getDataValue().getObject() != null )
    {
      InWsUserStudyUnitNovellUserId = ((String)vdf.getEntries()[20]
        .getDataValue().getObject());
    }
    else 
    {
      InWsUserStudyUnitNovellUserId = "          ";
    }
    // predicate view item
    if ( vdf.getEntries()[21].getDataValue().getObject() != null )
    {
      InExamPaperDetailsExamYear = ((Short)vdf.getEntries()[21].getDataValue()
        .getObject()).shortValue();
    }
    else 
    {
      InExamPaperDetailsExamYear = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[22].getDataValue().getObject() != null )
    {
      InExamPaperDetailsMkStudyUnitCode = ((String)vdf.getEntries()[22]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPaperDetailsMkStudyUnitCode = "       ";
    }
    // predicate view item
    if ( vdf.getEntries()[23].getDataValue().getObject() != null )
    {
      InExamPaperDetailsNr = ((Short)vdf.getEntries()[23].getDataValue()
        .getObject()).shortValue();
    }
    else 
    {
      InExamPaperDetailsNr = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[24].getDataValue().getObject() != null )
    {
      InExamPaperDetailsNrOfPages = ((Short)vdf.getEntries()[24].getDataValue()
        .getObject()).shortValue();
    }
    else 
    {
      InExamPaperDetailsNrOfPages = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[25].getDataValue().getObject() != null )
    {
      InExamPeriodDateMkExamPeriodCode = ((Short)vdf.getEntries()[25]
        .getDataValue().getObject()).shortValue();
    }
    else 
    {
      InExamPeriodDateMkExamPeriodCode = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[26].getDataValue().getObject() != null )
    {
      InExamPeriodDateMarkreadingCode = ((String)vdf.getEntries()[26]
        .getDataValue().getObject());
    }
    else 
    {
      InExamPeriodDateMarkreadingCode = "";
    }
    // predicate view item
    if ( vdf.getEntries()[27].getDataValue().getObject() != null )
    {
      InExamPeriodDateScriptMarkTot = ((Short)vdf.getEntries()[27].getDataValue(
        ).getObject()).shortValue();
    }
    else 
    {
      InExamPeriodDateScriptMarkTot = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[28].getDataValue().getObject() != null )
    {
      InExamPeriodDateMarkreadTot = ((Short)vdf.getEntries()[28].getDataValue()
        .getObject()).shortValue();
    }
    else 
    {
      InExamPeriodDateMarkreadTot = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[29].getDataValue().getObject() != null )
    {
      InExamPeriodDatePaperMarkTot = ((Short)vdf.getEntries()[29].getDataValue()
        .getObject()).shortValue();
    }
    else 
    {
      InExamPeriodDatePaperMarkTot = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[30].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsReturnCode = ((Short)vdf.getEntries()[30]
        .getDataValue().getObject()).shortValue();
    }
    else 
    {
      InCsfClientServerCommunicationsReturnCode = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[31].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerVersionNumber = ((Short)
        vdf.getEntries()[31].getDataValue().getObject()).shortValue();
    }
    else 
    {
      InCsfClientServerCommunicationsServerVersionNumber = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[32].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerRevisionNumber = ((Short)
        vdf.getEntries()[32].getDataValue().getObject()).shortValue();
    }
    else 
    {
      InCsfClientServerCommunicationsServerRevisionNumber = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[33].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerDevelopmentPhase = ((String)
        vdf.getEntries()[33].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsServerDevelopmentPhase = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[34].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsAction = ((String)vdf.getEntries()[34]
        .getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsAction = "  ";
    }
    // predicate view item
    if ( vdf.getEntries()[35].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientIsGuiFlag = ((String)vdf.getEntries()
        [35].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsClientIsGuiFlag = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[36].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerDate = ((Integer)vdf.getEntries()[36]
        .getDataValue().getObject()).intValue();
    }
    else 
    {
      InCsfClientServerCommunicationsServerDate = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[37].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerTime = ((Integer)vdf.getEntries()[37]
        .getDataValue().getObject()).intValue();
    }
    else 
    {
      InCsfClientServerCommunicationsServerTime = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[38].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerTimestamp = ((String)vdf.getEntries()
        [38].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsServerTimestamp = "00000000000000000000";
    }
    // predicate view item
    if ( vdf.getEntries()[39].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerTransactionCode = ((String)
        vdf.getEntries()[39].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsServerTransactionCode = "        ";
    }
    // predicate view item
    if ( vdf.getEntries()[40].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerUserId = ((String)vdf.getEntries()[
        40].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsServerUserId = "        ";
    }
    // predicate view item
    if ( vdf.getEntries()[41].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsServerRollbackFlag = ((String)
        vdf.getEntries()[41].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsServerRollbackFlag = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[42].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientVersionNumber = ((Short)
        vdf.getEntries()[42].getDataValue().getObject()).shortValue();
    }
    else 
    {
      InCsfClientServerCommunicationsClientVersionNumber = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[43].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientRevisionNumber = ((Short)
        vdf.getEntries()[43].getDataValue().getObject()).shortValue();
    }
    else 
    {
      InCsfClientServerCommunicationsClientRevisionNumber = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[44].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientDevelopmentPhase = ((String)
        vdf.getEntries()[44].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsClientDevelopmentPhase = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[45].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientDate = ((Integer)vdf.getEntries()[45]
        .getDataValue().getObject()).intValue();
    }
    else 
    {
      InCsfClientServerCommunicationsClientDate = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[46].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientTime = ((Integer)vdf.getEntries()[46]
        .getDataValue().getObject()).intValue();
    }
    else 
    {
      InCsfClientServerCommunicationsClientTime = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[47].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientTimestamp = ((String)vdf.getEntries()
        [47].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsClientTimestamp = "00000000000000000000";
    }
    // predicate view item
    if ( vdf.getEntries()[48].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientTransactionCode = ((String)
        vdf.getEntries()[48].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsClientTransactionCode = "        ";
    }
    // predicate view item
    if ( vdf.getEntries()[49].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsClientUserId = ((String)vdf.getEntries()[
        49].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsClientUserId = "        ";
    }
    // predicate view item
    if ( vdf.getEntries()[50].getDataValue().getObject() != null )
    {
      InCsfClientServerCommunicationsFirstpassFlag = ((String)vdf.getEntries()[
        50].getDataValue().getObject());
    }
    else 
    {
      InCsfClientServerCommunicationsFirstpassFlag = " ";
    }
    // group view current cardinality
    if ( vdf.getEntries()[51].getDataValue().getObject() != null )
    {
      InExamStationaryGroup_MA = ((Integer)vdf.getEntries()[51].getDataValue()
        .getObject()).intValue();
    }
    else 
    {
      InExamStationaryGroup_MA = ' ';
    }
    // group view active flags
    for(int adim0 = 0; adim0 < InExamStationaryGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[52].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InExamStationaryGroup_AC[adim0] = ((Character)((VDFEntryObject [])
          vdf.getEntries()[52].getDataValue().getObject())[adim0].getObject())
          .charValue();
      }
      else 
      {
        InExamStationaryGroup_AC[adim0] = ' ';
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InExamStationaryGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[53].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamStationeryItemCode[adim0] = ((String)((VDFEntryObject [])
          vdf.getEntries()[53].getDataValue().getObject())[adim0].getObject());
      }
      else 
      {
        InGExamStationeryItemCode[adim0] = "  ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InExamStationaryGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[54].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamPaperStationeryNeedsAveragePerStudent[adim0] = ((Double)((
          VDFEntryObject [])vdf.getEntries()[54].getDataValue().getObject())[
          adim0].getObject()).doubleValue();
      }
      else 
      {
        InGExamPaperStationeryNeedsAveragePerStudent[adim0] = 0.0;
      }
    }
    // group view current cardinality
    if ( vdf.getEntries()[55].getDataValue().getObject() != null )
    {
      InExamInstructionGroup_MA = ((Integer)vdf.getEntries()[55].getDataValue()
        .getObject()).intValue();
    }
    else 
    {
      InExamInstructionGroup_MA = ' ';
    }
    // group view active flags
    for(int adim0 = 0; adim0 < InExamInstructionGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[56].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InExamInstructionGroup_AC[adim0] = ((Character)((VDFEntryObject [])
          vdf.getEntries()[56].getDataValue().getObject())[adim0].getObject())
          .charValue();
      }
      else 
      {
        InExamInstructionGroup_AC[adim0] = ' ';
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InExamInstructionGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[57].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamDateInstructionMkDocumentParagraphCode[adim0] = ((Short)((
          VDFEntryObject [])vdf.getEntries()[57].getDataValue().getObject())[
          adim0].getObject()).shortValue();
      }
      else 
      {
        InGExamDateInstructionMkDocumentParagraphCode[adim0] = 0;
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InExamInstructionGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[58].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamDateInstructionMkWidthType[adim0] = ((String)((VDFEntryObject [])
          vdf.getEntries()[58].getDataValue().getObject())[adim0].getObject());
      }
      else 
      {
        InGExamDateInstructionMkWidthType[adim0] = " ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InExamInstructionGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[59].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamDateInstructionMkContents[adim0] = ((String)((VDFEntryObject [])
          vdf.getEntries()[59].getDataValue().getObject())[adim0].getObject());
      }
      else 
      {
        InGExamDateInstructionMkContents[adim0] = "  ";
      }
    }
    // group view current cardinality
    if ( vdf.getEntries()[60].getDataValue().getObject() != null )
    {
      InPaperLanguageGroup_MA = ((Integer)vdf.getEntries()[60].getDataValue()
        .getObject()).intValue();
    }
    else 
    {
      InPaperLanguageGroup_MA = ' ';
    }
    // group view active flags
    for(int adim0 = 0; adim0 < InPaperLanguageGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[61].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InPaperLanguageGroup_AC[adim0] = ((Character)((VDFEntryObject [])
          vdf.getEntries()[61].getDataValue().getObject())[adim0].getObject())
          .charValue();
      }
      else 
      {
        InPaperLanguageGroup_AC[adim0] = ' ';
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InPaperLanguageGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[62].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamPaperLanguageLanguageGc40[adim0] = ((String)((VDFEntryObject [])
          vdf.getEntries()[62].getDataValue().getObject())[adim0].getObject());
      }
      else 
      {
        InGExamPaperLanguageLanguageGc40[adim0] = "";
      }
    }
    // group view current cardinality
    if ( vdf.getEntries()[63].getDataValue().getObject() != null )
    {
      InAdditionalInstrGroup_MA = ((Integer)vdf.getEntries()[63].getDataValue()
        .getObject()).intValue();
    }
    else 
    {
      InAdditionalInstrGroup_MA = ' ';
    }
    // group view active flags
    for(int adim0 = 0; adim0 < InAdditionalInstrGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[64].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InAdditionalInstrGroup_AC[adim0] = ((Character)((VDFEntryObject [])
          vdf.getEntries()[64].getDataValue().getObject())[adim0].getObject())
          .charValue();
      }
      else 
      {
        InAdditionalInstrGroup_AC[adim0] = ' ';
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InAdditionalInstrGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[65].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamPaperAddInstructionsInstructionNr[adim0] = ((Short)((
          VDFEntryObject [])vdf.getEntries()[65].getDataValue().getObject())[
          adim0].getObject()).shortValue();
      }
      else 
      {
        InGExamPaperAddInstructionsInstructionNr[adim0] = 0;
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < InAdditionalInstrGroup_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[66].getDataValue().getObject())[
        adim0].getObject() != null )
      {
        InGExamPaperAddInstructionsInstruction[adim0] = ((String)((
          VDFEntryObject [])vdf.getEntries()[66].getDataValue().getObject())[
          adim0].getObject());
      }
      else 
      {
        InGExamPaperAddInstructionsInstruction[adim0] = "";
      }
    }
    // predicate view item
    if ( vdf.getEntries()[67].getDataValue().getObject() != null )
    {
      InWsAddressV2CellNumber = ((String)vdf.getEntries()[67].getDataValue()
        .getObject());
    }
    else 
    {
      InWsAddressV2CellNumber = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[68].getDataValue().getObject() != null )
    {
      InWsAddressV2HomeNumber = ((String)vdf.getEntries()[68].getDataValue()
        .getObject());
    }
    else 
    {
      InWsAddressV2HomeNumber = "                            ";
    }
    // predicate view item
    if ( vdf.getEntries()[69].getDataValue().getObject() != null )
    {
      InWsAddressV2WorkNumber = ((String)vdf.getEntries()[69].getDataValue()
        .getObject());
    }
    else 
    {
      InWsAddressV2WorkNumber = "                            ";
    }
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((EXCDQ01S_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(EXCDQ01S_IA orig)
  {
    InExamPaperCoverDocketContactPersNr_AS = 
      orig.InExamPaperCoverDocketContactPersNr_AS;
    InExamPaperCoverDocketContactPersNr = 
      orig.InExamPaperCoverDocketContactPersNr;
    InExamPaperCoverDocketBookRequired_AS = 
      orig.InExamPaperCoverDocketBookRequired_AS;
    InExamPaperCoverDocketBookRequired = 
      orig.InExamPaperCoverDocketBookRequired;
    InExamPaperCoverDocketProofReadRequest_AS = 
      orig.InExamPaperCoverDocketProofReadRequest_AS;
    InExamPaperCoverDocketProofReadRequest = 
      orig.InExamPaperCoverDocketProofReadRequest;
    InExamPaperCoverDocketStatusGc41_AS = 
      orig.InExamPaperCoverDocketStatusGc41_AS;
    InExamPaperCoverDocketStatusGc41 = orig.InExamPaperCoverDocketStatusGc41;
    InExamPaperCoverDocketTotalRackPages_AS = 
      orig.InExamPaperCoverDocketTotalRackPages_AS;
    InExamPaperCoverDocketTotalRackPages = 
      orig.InExamPaperCoverDocketTotalRackPages;
    InExamPaperCoverDocketTotalPages_AS = 
      orig.InExamPaperCoverDocketTotalPages_AS;
    InExamPaperCoverDocketTotalPages = orig.InExamPaperCoverDocketTotalPages;
    InExamPaperCoverDocketAnnexurePages_AS = 
      orig.InExamPaperCoverDocketAnnexurePages_AS;
    InExamPaperCoverDocketAnnexurePages = 
      orig.InExamPaperCoverDocketAnnexurePages;
    InExamPaperCoverDocketMemorandumIncl_AS = 
      orig.InExamPaperCoverDocketMemorandumIncl_AS;
    InExamPaperCoverDocketMemorandumIncl = 
      orig.InExamPaperCoverDocketMemorandumIncl;
    InExamPaperCoverDocketDeclarationFlag_AS = 
      orig.InExamPaperCoverDocketDeclarationFlag_AS;
    InExamPaperCoverDocketDeclarationFlag = 
      orig.InExamPaperCoverDocketDeclarationFlag;
    InExamPaperCoverDocketFillInPaperGc50_AS = 
      orig.InExamPaperCoverDocketFillInPaperGc50_AS;
    InExamPaperCoverDocketFillInPaperGc50 = 
      orig.InExamPaperCoverDocketFillInPaperGc50;
    InExamPaperCoverDocketOpenBookGc50_AS = 
      orig.InExamPaperCoverDocketOpenBookGc50_AS;
    InExamPaperCoverDocketOpenBookGc50 = 
      orig.InExamPaperCoverDocketOpenBookGc50;
    InExamPaperCoverDocketKeepPaperFlag_AS = 
      orig.InExamPaperCoverDocketKeepPaperFlag_AS;
    InExamPaperCoverDocketKeepPaperFlag = 
      orig.InExamPaperCoverDocketKeepPaperFlag;
    InExamPaperCoverDocketCalcPermitFlag_AS = 
      orig.InExamPaperCoverDocketCalcPermitFlag_AS;
    InExamPaperCoverDocketCalcPermitFlag = 
      orig.InExamPaperCoverDocketCalcPermitFlag;
    InExamPaperCoverDocketExaminerPrtGc107_AS = 
      orig.InExamPaperCoverDocketExaminerPrtGc107_AS;
    InExamPaperCoverDocketExaminerPrtGc107 = 
      orig.InExamPaperCoverDocketExaminerPrtGc107;
    InExamPaperCoverDocketMcqInstrFlag_AS = 
      orig.InExamPaperCoverDocketMcqInstrFlag_AS;
    InExamPaperCoverDocketMcqInstrFlag = 
      orig.InExamPaperCoverDocketMcqInstrFlag;
    InExamPaperCoverDocketAttendRegFlag_AS = 
      orig.InExamPaperCoverDocketAttendRegFlag_AS;
    InExamPaperCoverDocketAttendRegFlag = 
      orig.InExamPaperCoverDocketAttendRegFlag;
    InExamPaperCoverDocketPaperColour_AS = 
      orig.InExamPaperCoverDocketPaperColour_AS;
    InExamPaperCoverDocketPaperColour = orig.InExamPaperCoverDocketPaperColour;
    InExamPaperCoverDocketNrDocsSubmitted_AS = 
      orig.InExamPaperCoverDocketNrDocsSubmitted_AS;
    InExamPaperCoverDocketNrDocsSubmitted = 
      orig.InExamPaperCoverDocketNrDocsSubmitted;
    InExamPaperLogActionGc39_AS = orig.InExamPaperLogActionGc39_AS;
    InExamPaperLogActionGc39 = orig.InExamPaperLogActionGc39;
    InExamPaperLogUpdatedBy_AS = orig.InExamPaperLogUpdatedBy_AS;
    InExamPaperLogUpdatedBy = orig.InExamPaperLogUpdatedBy;
    InWsUserStudyUnitNovellUserId_AS = orig.InWsUserStudyUnitNovellUserId_AS;
    InWsUserStudyUnitNovellUserId = orig.InWsUserStudyUnitNovellUserId;
    InExamPaperDetailsExamYear_AS = orig.InExamPaperDetailsExamYear_AS;
    InExamPaperDetailsExamYear = orig.InExamPaperDetailsExamYear;
    InExamPaperDetailsMkStudyUnitCode_AS = 
      orig.InExamPaperDetailsMkStudyUnitCode_AS;
    InExamPaperDetailsMkStudyUnitCode = orig.InExamPaperDetailsMkStudyUnitCode;
    InExamPaperDetailsNr_AS = orig.InExamPaperDetailsNr_AS;
    InExamPaperDetailsNr = orig.InExamPaperDetailsNr;
    InExamPaperDetailsNrOfPages_AS = orig.InExamPaperDetailsNrOfPages_AS;
    InExamPaperDetailsNrOfPages = orig.InExamPaperDetailsNrOfPages;
    InExamPeriodDateMkExamPeriodCode_AS = 
      orig.InExamPeriodDateMkExamPeriodCode_AS;
    InExamPeriodDateMkExamPeriodCode = orig.InExamPeriodDateMkExamPeriodCode;
    InExamPeriodDateMarkreadingCode_AS = 
      orig.InExamPeriodDateMarkreadingCode_AS;
    InExamPeriodDateMarkreadingCode = orig.InExamPeriodDateMarkreadingCode;
    InExamPeriodDateScriptMarkTot_AS = orig.InExamPeriodDateScriptMarkTot_AS;
    InExamPeriodDateScriptMarkTot = orig.InExamPeriodDateScriptMarkTot;
    InExamPeriodDateMarkreadTot_AS = orig.InExamPeriodDateMarkreadTot_AS;
    InExamPeriodDateMarkreadTot = orig.InExamPeriodDateMarkreadTot;
    InExamPeriodDatePaperMarkTot_AS = orig.InExamPeriodDatePaperMarkTot_AS;
    InExamPeriodDatePaperMarkTot = orig.InExamPeriodDatePaperMarkTot;
    InCsfClientServerCommunicationsReturnCode_AS = 
      orig.InCsfClientServerCommunicationsReturnCode_AS;
    InCsfClientServerCommunicationsReturnCode = 
      orig.InCsfClientServerCommunicationsReturnCode;
    InCsfClientServerCommunicationsServerVersionNumber_AS = 
      orig.InCsfClientServerCommunicationsServerVersionNumber_AS;
    InCsfClientServerCommunicationsServerVersionNumber = 
      orig.InCsfClientServerCommunicationsServerVersionNumber;
    InCsfClientServerCommunicationsServerRevisionNumber_AS = 
      orig.InCsfClientServerCommunicationsServerRevisionNumber_AS;
    InCsfClientServerCommunicationsServerRevisionNumber = 
      orig.InCsfClientServerCommunicationsServerRevisionNumber;
    InCsfClientServerCommunicationsServerDevelopmentPhase_AS = 
      orig.InCsfClientServerCommunicationsServerDevelopmentPhase_AS;
    InCsfClientServerCommunicationsServerDevelopmentPhase = 
      orig.InCsfClientServerCommunicationsServerDevelopmentPhase;
    InCsfClientServerCommunicationsAction_AS = 
      orig.InCsfClientServerCommunicationsAction_AS;
    InCsfClientServerCommunicationsAction = 
      orig.InCsfClientServerCommunicationsAction;
    InCsfClientServerCommunicationsClientIsGuiFlag_AS = 
      orig.InCsfClientServerCommunicationsClientIsGuiFlag_AS;
    InCsfClientServerCommunicationsClientIsGuiFlag = 
      orig.InCsfClientServerCommunicationsClientIsGuiFlag;
    InCsfClientServerCommunicationsServerDate_AS = 
      orig.InCsfClientServerCommunicationsServerDate_AS;
    InCsfClientServerCommunicationsServerDate = 
      orig.InCsfClientServerCommunicationsServerDate;
    InCsfClientServerCommunicationsServerTime_AS = 
      orig.InCsfClientServerCommunicationsServerTime_AS;
    InCsfClientServerCommunicationsServerTime = 
      orig.InCsfClientServerCommunicationsServerTime;
    InCsfClientServerCommunicationsServerTimestamp_AS = 
      orig.InCsfClientServerCommunicationsServerTimestamp_AS;
    InCsfClientServerCommunicationsServerTimestamp = 
      orig.InCsfClientServerCommunicationsServerTimestamp;
    InCsfClientServerCommunicationsServerTransactionCode_AS = 
      orig.InCsfClientServerCommunicationsServerTransactionCode_AS;
    InCsfClientServerCommunicationsServerTransactionCode = 
      orig.InCsfClientServerCommunicationsServerTransactionCode;
    InCsfClientServerCommunicationsServerUserId_AS = 
      orig.InCsfClientServerCommunicationsServerUserId_AS;
    InCsfClientServerCommunicationsServerUserId = 
      orig.InCsfClientServerCommunicationsServerUserId;
    InCsfClientServerCommunicationsServerRollbackFlag_AS = 
      orig.InCsfClientServerCommunicationsServerRollbackFlag_AS;
    InCsfClientServerCommunicationsServerRollbackFlag = 
      orig.InCsfClientServerCommunicationsServerRollbackFlag;
    InCsfClientServerCommunicationsClientVersionNumber_AS = 
      orig.InCsfClientServerCommunicationsClientVersionNumber_AS;
    InCsfClientServerCommunicationsClientVersionNumber = 
      orig.InCsfClientServerCommunicationsClientVersionNumber;
    InCsfClientServerCommunicationsClientRevisionNumber_AS = 
      orig.InCsfClientServerCommunicationsClientRevisionNumber_AS;
    InCsfClientServerCommunicationsClientRevisionNumber = 
      orig.InCsfClientServerCommunicationsClientRevisionNumber;
    InCsfClientServerCommunicationsClientDevelopmentPhase_AS = 
      orig.InCsfClientServerCommunicationsClientDevelopmentPhase_AS;
    InCsfClientServerCommunicationsClientDevelopmentPhase = 
      orig.InCsfClientServerCommunicationsClientDevelopmentPhase;
    InCsfClientServerCommunicationsClientDate_AS = 
      orig.InCsfClientServerCommunicationsClientDate_AS;
    InCsfClientServerCommunicationsClientDate = 
      orig.InCsfClientServerCommunicationsClientDate;
    InCsfClientServerCommunicationsClientTime_AS = 
      orig.InCsfClientServerCommunicationsClientTime_AS;
    InCsfClientServerCommunicationsClientTime = 
      orig.InCsfClientServerCommunicationsClientTime;
    InCsfClientServerCommunicationsClientTimestamp_AS = 
      orig.InCsfClientServerCommunicationsClientTimestamp_AS;
    InCsfClientServerCommunicationsClientTimestamp = 
      orig.InCsfClientServerCommunicationsClientTimestamp;
    InCsfClientServerCommunicationsClientTransactionCode_AS = 
      orig.InCsfClientServerCommunicationsClientTransactionCode_AS;
    InCsfClientServerCommunicationsClientTransactionCode = 
      orig.InCsfClientServerCommunicationsClientTransactionCode;
    InCsfClientServerCommunicationsClientUserId_AS = 
      orig.InCsfClientServerCommunicationsClientUserId_AS;
    InCsfClientServerCommunicationsClientUserId = 
      orig.InCsfClientServerCommunicationsClientUserId;
    InCsfClientServerCommunicationsFirstpassFlag_AS = 
      orig.InCsfClientServerCommunicationsFirstpassFlag_AS;
    InCsfClientServerCommunicationsFirstpassFlag = 
      orig.InCsfClientServerCommunicationsFirstpassFlag;
    InExamStationaryGroup_MA = orig.InExamStationaryGroup_MA;
    for(int a = 0; a < 20; a++)
    {
      InExamStationaryGroup_AC[a] = orig.InExamStationaryGroup_AC[a];
      InGExamStationeryItemCode_AS[a] = orig.InGExamStationeryItemCode_AS[a];
      InGExamStationeryItemCode[a] = orig.InGExamStationeryItemCode[a];
      InGExamPaperStationeryNeedsAveragePerStudent_AS[a] = 
        orig.InGExamPaperStationeryNeedsAveragePerStudent_AS[a];
      InGExamPaperStationeryNeedsAveragePerStudent[a] = 
        orig.InGExamPaperStationeryNeedsAveragePerStudent[a];
    }
    InExamInstructionGroup_MA = orig.InExamInstructionGroup_MA;
    for(int a = 0; a < 25; a++)
    {
      InExamInstructionGroup_AC[a] = orig.InExamInstructionGroup_AC[a];
      InGExamDateInstructionMkDocumentParagraphCode_AS[a] = 
        orig.InGExamDateInstructionMkDocumentParagraphCode_AS[a];
      InGExamDateInstructionMkDocumentParagraphCode[a] = 
        orig.InGExamDateInstructionMkDocumentParagraphCode[a];
      InGExamDateInstructionMkWidthType_AS[a] = 
        orig.InGExamDateInstructionMkWidthType_AS[a];
      InGExamDateInstructionMkWidthType[a] = 
        orig.InGExamDateInstructionMkWidthType[a];
      InGExamDateInstructionMkContents_AS[a] = 
        orig.InGExamDateInstructionMkContents_AS[a];
      InGExamDateInstructionMkContents[a] = 
        orig.InGExamDateInstructionMkContents[a];
    }
    InPaperLanguageGroup_MA = orig.InPaperLanguageGroup_MA;
    for(int a = 0; a < 10; a++)
    {
      InPaperLanguageGroup_AC[a] = orig.InPaperLanguageGroup_AC[a];
      InGExamPaperLanguageLanguageGc40_AS[a] = 
        orig.InGExamPaperLanguageLanguageGc40_AS[a];
      InGExamPaperLanguageLanguageGc40[a] = 
        orig.InGExamPaperLanguageLanguageGc40[a];
    }
    InAdditionalInstrGroup_MA = orig.InAdditionalInstrGroup_MA;
    for(int a = 0; a < 20; a++)
    {
      InAdditionalInstrGroup_AC[a] = orig.InAdditionalInstrGroup_AC[a];
      InGExamPaperAddInstructionsInstructionNr_AS[a] = 
        orig.InGExamPaperAddInstructionsInstructionNr_AS[a];
      InGExamPaperAddInstructionsInstructionNr[a] = 
        orig.InGExamPaperAddInstructionsInstructionNr[a];
      InGExamPaperAddInstructionsInstruction_AS[a] = 
        orig.InGExamPaperAddInstructionsInstruction_AS[a];
      InGExamPaperAddInstructionsInstruction[a] = 
        orig.InGExamPaperAddInstructionsInstruction[a];
    }
    InWsAddressV2CellNumber_AS = orig.InWsAddressV2CellNumber_AS;
    InWsAddressV2CellNumber = orig.InWsAddressV2CellNumber;
    InWsAddressV2HomeNumber_AS = orig.InWsAddressV2HomeNumber_AS;
    InWsAddressV2HomeNumber = orig.InWsAddressV2HomeNumber;
    InWsAddressV2WorkNumber_AS = orig.InWsAddressV2WorkNumber_AS;
    InWsAddressV2WorkNumber = orig.InWsAddressV2WorkNumber;
  }
}
