import java.sql.Types;
import org.apache.commons.collections.map.ListOrderedMap;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import java.io.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.net.URL;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.*;

import org.apache.axis.AxisFault;
import org.apache.axis.utils.JavaUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.JdbcTemplate;

import org.sakaiproject.event.cover.UsageSessionService;
import org.sakaiproject.event.api.UsageSession;
import org.sakaiproject.component.cover.ServerConfigurationService;

import za.ac.unisa.lms.db.StudentSystemDAO;
import za.ac.unisa.lms.db.SakaiDAO;

public class ExtractGradebookResults2WebService {

	public NodeList textLNList;
	public NodeList textFNList;
	String urlf;

	// set the homepage to use as link
	private String serverPath = ServerConfigurationService.getServerUrl();

	private UsageSession usageSession;
	
	// assessment online types
	private static final String ONLINE_TYPES = "'BL','DF','SA'";

	private static final String RETRIEVE_ONLINEASSESSMENTS_ALL = "select MK_STUDY_UNIT_CODE, YEAR, PERIOD, ASSIGNMENT_NR "+
				   " from UNQASS "+
	               " where year = ?"+
	               " and   period = ?"+
	               " and   assignment_nr = 1"+
	               " and   type = 'H'"+
	               //" and   type_Gc176 in ("+ONLINE_TYPES+")"+
	               " and   closing_date < sysdate";
	               
	private static final String RETRIEVE_ONLINEASSESSMENTS_MODULE = "select MK_STUDY_UNIT_CODE, YEAR, PERIOD, ASSIGNMENT_NR from UNQASS "+
	               " where year = ?"+
	               " and   period = ?"+
	               " and   mk_study_unit_code = ?"+
	               " and   assignment_nr = 1"+
	               " and   type = 'H'"+
	               //" and   type_Gc176 in ("+ONLINE_TYPES+")"+
	               " and   closing_date < sysdate";

	private static final String RETRIEVE_GRADEBOOKITEM = "select GBGOT.id as ID, GBGT.gradebook_uid, GBGOT.gradebook_id,"+ 
	               " GBGOT.name "+ 
	               " FROM GB_GRADABLE_OBJECT_T GBGOT, GB_GRADEBOOK_T GBGT "+
	               " WHERE GBGOT.GRADEBOOK_ID = GBGT.ID"+ 
	               " AND   GBGT.GRADEBOOK_UID = upper(?)"+ // coursesite example EUP1501-12-Y1
	              // " AND   GBGOT.NAME LIKE ('? %')"; // unqass.assignment_nr
	               " AND   substr(gbgot.name,1,1) = ?"; // unqass.assignment_nr
	              
	               
    private static final String RETRIEVE_STUDENTWITH_MARKON_GRADEBOOK = "SELECT GB.ID, GB.GRADABLE_OBJECT_ID, "+
                   " SAKAI_USER_ID_MAP.EID AS STNUMBER, GB.DATE_RECORDED, GB.POINTS_EARNED, GBGOT.POINTS_POSSIBLE, "+
                   " (GB.POINTS_EARNED/GBGOT.POINTS_POSSIBLE*100) AS PERCENTAGE"+  	               
                   " FROM  GB_GRADE_RECORD_T GB, SAKAI_USER_ID_MAP, GB_GRADABLE_OBJECT_T GBGOT"+
                   " WHERE GB.GRADABLE_OBJECT_ID = ?"+
                   " AND   STUDENT_ID = SAKAI_USER_ID_MAP.USER_ID"+
                   " AND   GB.GRADABLE_OBJECT_ID = GBGOT.ID";

	/** Retrieve all marks from Sakai Gradebook that must be updated to the Student System
		Input:
			module = Module - either enter module code OR if for all modules enter ALL
			acadYear = Academic year
			semPeriod = Semester period
	*/
	public String getGradebookMarks(String module, String acadYear, String semPeriod, String assignmentNr, String onlineType )throws AxisFault {
	
		String result ="";
		String gradebookId = "";
		boolean gradebookItemFound = false;
		module = module.toUpperCase();

		Log log = LogFactory.getLog(this.getClass());
		
		try {
				String moduleSite = module+"-"+acadYear+"-";
				if (semPeriod.equals("0")) {
					moduleSite = moduleSite+"Y1";
				}else if (semPeriod.equals("6")) {
					moduleSite = moduleSite+"Y2";
				}else if (semPeriod.equals("1")) {
					moduleSite = moduleSite+"S1";
				}else if (semPeriod.equals("2")) {
					moduleSite = moduleSite+"S2";
				}
				System.out.println("moduleSite = "+moduleSite);
				result = result+"moduleSite = "+moduleSite+"\n";
				acadYear = "20"+acadYear;
				
				// For each online assignment retrieved, retrieve the matching Gradebook item
				JdbcTemplate jdt2 = new JdbcTemplate(new SakaiDAO()
					.getDataSource());
				try {
						List recordsGI = jdt2.queryForList(RETRIEVE_GRADEBOOKITEM,
							new Object[] {moduleSite, assignmentNr});
					
						if (recordsGI.size() == 0) {
							result = result + "Gradebook item not found";
							gradebookItemFound = false;
						} else {
							result = result + "Gradebook item found";
							gradebookItemFound = true;
						}
						
						Iterator recordsGI_it = recordsGI.iterator();
											
						while (recordsGI_it.hasNext()) {
	
							ListOrderedMap record_GradebookIds = (ListOrderedMap) recordsGI_it.next();
							gradebookId = record_GradebookIds.get("ID").toString();
							result = result + "Gradebook id for "+moduleSite+" = "+gradebookId+"\n";
						} //end of while (recordsGI.hasNext()) 
				} catch (Exception e) {
						e.printStackTrace();
						log.error(e);
						throw new AxisFault(e.getMessage());
				} // end try -catch Exception jdt2.queryForList(RETRIEVE_GRADEBOOKITEM
							
				if (gradebookItemFound == true) {
					// Retrieve marks for gradebook assessment
					JdbcTemplate jdt3 = new JdbcTemplate(new SakaiDAO()
						.getDataSource());
						
					try {
						List recordsGrades = jdt3.queryForList(RETRIEVE_STUDENTWITH_MARKON_GRADEBOOK,
							new Object[] {gradebookId});
	
						Iterator recordsGrades_it = recordsGrades.iterator();
						Integer recordCounter = 0;
						String updateStuassXML = "";
						
						/* Document for inXML content */
						try {
							DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
							DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();			
							Document document = documentBuilder.newDocument();			
						
							Element data = document.createElement("data");
							document.appendChild(data);
					 
							// fields elements
							Element fields = document.createElement("fields");
					    	//fields.appendChild(document.createTextNode("fields"));
							
							/* Headings/fields */			 
							// acadField elements
							Element field1 = document.createElement("field1");
							field1.appendChild(document.createTextNode("acadYear"));
					
							// Semester elements
							Element field2 = document.createElement("field2");
							field2.appendChild(document.createTextNode("Semester"));
									
							// StudNo elements
							Element field3 = document.createElement("field3");
							field3.appendChild(document.createTextNode("StudNo"));
							
							// MODULE elements
							Element field4 = document.createElement("field4");
							field4.appendChild(document.createTextNode("MODULE"));
									
							// AssNo elements
							Element field5 = document.createElement("field5");
							field5.appendChild(document.createTextNode("AssNo"));
									
							// Percentage elements
							Element field6 = document.createElement("field6");
							field6.appendChild(document.createTextNode("Percentage"));
									
							// Lecturer elements
							Element field7 = document.createElement("field7");
							field7.appendChild(document.createTextNode("Lecturer"));
									
							// OnlineType elements
							Element field8 = document.createElement("field8");
							field8.appendChild(document.createTextNode("OnlineType"));
									
							// Perc elements
							Element field9 = document.createElement("field9");
							field9.appendChild(document.createTextNode("Perc"));
									
							// DateIn elements
							Element field10 = document.createElement("field10");
							field10.appendChild(document.createTextNode("DateIn"));
									
							// DateOut elements
							Element field11 = document.createElement("field11");
							field11.appendChild(document.createTextNode("DateOut"));
					
							// SeqNo elements
							Element field12 = document.createElement("field12");
							field12.appendChild(document.createTextNode("SeqNo"));
					
							// pperc elements
							Element field13 = document.createElement("field13");
							field13.appendChild(document.createTextNode("pperc"));
					
							// add fields element to data element
							data.appendChild(fields);
									
							// add to fields element
							fields.appendChild(field1);
							fields.appendChild(field2);
							fields.appendChild(field3);
							fields.appendChild(field4);
							fields.appendChild(field5);
							fields.appendChild(field6);
							fields.appendChild(field7);
							fields.appendChild(field8);
							fields.appendChild(field9);
							fields.appendChild(field10);
							fields.appendChild(field11);
							fields.appendChild(field12);
							fields.appendChild(field13);
							
							// records elements
							Element records = document.createElement("records");
							data.appendChild(records);							
						
							while (recordsGrades_it.hasNext()) {
			
									ListOrderedMap record_StudentResult = (ListOrderedMap) recordsGrades_it.next();
									recordCounter = recordCounter+1;
									
									String studentNr = record_StudentResult.get("STNUMBER").toString();
									String percentage = record_StudentResult.get("PERCENTAGE").toString();
									String lecturer = "syzelle";
									String studentTmp = studentNr+"#"+percentage+"#"+lecturer;
							
									Element record = document.createElement("record"+recordCounter);
									
									//String acadYear, String semPeriod, String module, 
									//String assignmentNr, String onlineType
									Element value1 = document.createElement("value1");
									value1.appendChild(document.createTextNode(acadYear));
									
									Element value2 = document.createElement("value2");
									value2.appendChild(document.createTextNode(semPeriod));
									
									Element value3 = document.createElement("value3");
									value3.appendChild(document.createTextNode(studentNr));
									
									Element value4 = document.createElement("value4");
									value4.appendChild(document.createTextNode(module));
									
									Element value5 = document.createElement("value5");
									value5.appendChild(document.createTextNode(assignmentNr));		

									Element value6 = document.createElement("value6");
									value6.appendChild(document.createTextNode(percentage));
									
									Element value7 = document.createElement("value7");
									value7.appendChild(document.createTextNode(lecturer));																									
									
									Element value8 = document.createElement("value8");
									value8.appendChild(document.createTextNode(onlineType));																									
									
									Element value9 = document.createElement("value9");
									value9.appendChild(document.createTextNode(""));																									
									
									Element value10 = document.createElement("value10");
									value10.appendChild(document.createTextNode(""));
									
									Element value11 = document.createElement("value11");
									value11.appendChild(document.createTextNode(""));
									
									Element value12 = document.createElement("value12");
									value12.appendChild(document.createTextNode(""));
									
									Element value13 = document.createElement("value13");
									value13.appendChild(document.createTextNode(""));
									
									// add values to record
									record.appendChild(value1);
									record.appendChild(value2);
									record.appendChild(value3);
									record.appendChild(value4);
									record.appendChild(value5);
									record.appendChild(value6);
									record.appendChild(value7);
									record.appendChild(value8);
									record.appendChild(value9);
									record.appendChild(value10);
									record.appendChild(value11);
									record.appendChild(value12);
									record.appendChild(value13);
									
									// add record to records element
									records.appendChild(record);	

									if (recordCounter == 5) {
										
										StringWriter writer = new StringWriter();
							
										TransformerFactory transformerFactory = TransformerFactory.newInstance();
											 
										Transformer transformer = transformerFactory.newTransformer();
												
										transformer.setOutputProperty(OutputKeys.INDENT, "yes"); 
										DOMSource source = new DOMSource(document);
												        
										//StreamResult result =  new StreamResult(output);
										StreamResult strResult =  new StreamResult(writer);
										transformer.transform(source, strResult);
												
										updateStuassXML = writer.getBuffer().toString();		
										//updateStuassXML = updateStuassXML.replaceAll("\\?","%3f");
 										//updateStuassXML = updateStuassXML.replaceAll("<","%3c");
										//updateStuassXML = updateStuassXML.replaceAll(">","%3e");
										//updateStuassXML = updateStuassXML.replaceAll("\"", "%22");				
																			                                
										/** update to student system
										  * webservice
										  * input: ID; AcadYear,Semester,StudNo,MODULE,AssNo,Percentage,Lecturer,OnlineType,Perc,DateIn,DateOut,SeqNo, pperc 
										*/
												
										String id = "782985";
										String userId = "gradebook";
										
										/** For one record at a time: http://www2dev.unisa.ac.za/aol/asp/sql_exec_report2.asp?report=XML 
										  * String address = "http://www2dev.unisa.ac.za/aol/asp/sql_exec_report2.asp?report=XML"; */
										/* example of webservice call
										  * completeUrlString = "http://www2dev.unisa.ac.za/aol/asp/sql_exec_report2.asp?export=XML&ID=782985&AcadYear=2012&Semester=0&StudNo=42658047&MODULE=EUP1501&AssNo=1&Percentage=50&Lecturer=syzelle&OnlineType=b"; */
										
										/** For a batch of records as XML content: http://www2dev.unisa.ac.za/aol/asp/sql_exec_xml.asp?report=XML */
										String address = "http://www2dev.unisa.ac.za/aol/asp/sql_exec_xml.asp?report=XML";
										
										String completeUrlString = address;
														
										completeUrlString = completeUrlString+ "&ID="+id
										        + "&USERID="+userId
												+ "&inXML="+updateStuassXML;
										result = result+"    "+completeUrlString;
										
										try { 
											URL url = new URL(completeUrlString);
											// XML CONTENT
											//URL url = new URL("http://www2dev.unisa.ac.za/aol/asp/sql_exec_xml.asp?report=XML&ID=782985&USERID=gradebook&inXML=<\?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"\?><data><fields><field1>acadYear</field1><field2>Semester</field2><field3>StudNo</field3><field4>MODULE</field4><field5>AssNo</field5><field6>Percentage</field6><field7>Lecturer</field7><field8>OnlineType</field8><field9>Perc</field9><field10>DateIn</field10><field11>DateOut</field11><field12>SeqNo</field12><field13>pperc</field13></fields><records><record1><value1>2012</value1><value2>0</value2><value3>50437615</value3><value4>EUP1501</value4><value5>1</value5><value6>50</value6><value7>syzelle</value7><value8>B</value8><value9/><value10/><value11/><value12/><value13/></record1></records></data>");
											// SINGLE RECORD
											//URL url = new URL("http://www2dev.unisa.ac.za/aol/asp/sql_exec_report2.asp?export=XML&ID=782985&AcadYear=2012&Semester=0&StudNo=42658047&MODULE=EUP1501&AssNo=1&Percentage=50&Lecturer=syzelle&OnlineType=b&myId=syzelle");
											result = "webservice UPDATE STUASS url="+url+"\n"; 
											System.out.println("url = "+url);
											
											DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
											result = result + " after docBuilderFactory";
													 
								            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
								            result = result + " after docBuilder"; 
																				            
								            System.out.println("before url.openStream url = "+url);
											Document docOutXML = docBuilder.parse(url.openStream());
											result = result + " docOutXML = "+docOutXML;
				            	            										
											docOutXML.getDocumentElement().normalize();
											
											//ArrayList<DataObject> objects = new ArrayList<DataObject>();
													
											//objects = getValuesDataObject(doc);

											result = result + "%% look at outXML from STUASS UPDATE werbservice %%";											
											NodeList listOfRecords = docOutXML.getElementsByTagName("record");
											result = result+ "NUMBER OF RECORDS ="+ listOfRecords.getLength();
											if(listOfRecords.getLength()!=0){
											
												for (int s = 0; s < listOfRecords.getLength(); s++) {
													Node firstDocTypeNode = listOfRecords.item(s);
													result = result+"\n>>>>>>"+ firstDocTypeNode;
													if (firstDocTypeNode.getNodeType() == Node.ELEMENT_NODE) {
														Element firstElement = (Element) firstDocTypeNode;
								                    	NodeList valueOneE = firstElement.getElementsByTagName("error");
								                    	Element valueOne = (Element)valueOneE.item(0);
														NodeList valueOneList = valueOne.getChildNodes();
														String error1 = "";
														try{
															error1 = ((Node)valueOneList.item(0)).getNodeValue().trim();
														}catch(Exception e){
															error1 = " ";
														}
														result = result+" - " + error1;
													} // end of if if (firstDocTypeNode.getNodeType() == Node.ELEMENT_NODE) { 
													 
												} // end of for (int s = 0; s < listOfRecords.getLength(); s++) 
											} // end of if(listOfRecords.getLength()!=0)
											//result = result+objects;
											//objects.add(0,getHeadingDataObject(doc));
											
										}catch (Exception e) {
											throw new RuntimeException(
											"Exception Error with Get Update Stuass web service (ID=782985)"+ e);
										} // end of URL url = new URL(completeUrlString);
										
										recordCounter =0;
										
									} // end of if (recordCounter == 5) {
							
							} //end of while (recordsGrades_it.hasNext()) 
							
						} catch (Exception e) {
							e.printStackTrace();
						} // end of try DocumentBuilder (inXML content)
					
					} catch (Exception e) {
						e.printStackTrace();
						log.error(e);
						throw new AxisFault(e.getMessage());
					} // jdt3.queryForList(RETRIEVE_STUDENTWITH_MARKON_GRADEBOOK,
				
				} // if (gradebookItemFound == true) 
				
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new AxisFault(e.getMessage());
		} // end String moduleSite = module+"-"+acadYear+"-";
		
		return result;

	} // end getGradebookMarks 
	
} // end of ExtractGradebookResultsWebService