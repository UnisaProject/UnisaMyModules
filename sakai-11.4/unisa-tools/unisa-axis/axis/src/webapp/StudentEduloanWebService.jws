import java.sql.Types;
import org.apache.commons.collections.map.ListOrderedMap;
import java.util.Iterator;
import java.util.List;


import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.JdbcTemplate;

import org.sakaiproject.event.cover.UsageSessionService;
import org.sakaiproject.event.api.UsageSession;

import za.ac.unisa.lms.db.StudentSystemDAO;


public class StudentEduloanWebService {


	public String userAgent = "Student Eduloan";

	private UsageSession usageSession;

	private static final String validStudentQuery = "select 1 from stu where nr = ?";

	private static final String studentBioQuery = "select nr,surname,mk_title,initials,identity_nr,"
			+ " address_line_1 as Adr1, "
			+ " ADDRESS_LINE_2 as Adr2, ADDRESS_LINE_3 as Adr3,"
			+ " ADDRESS_LINE_4 as Adr4,"
			+ " lpad(POSTAL_CODE,4,0) as Postal, "
			+ " email_address as Email,"
			+ " home_number as Home, "
			+ " work_number as Work, "
			+ " cell_number as Cell "
			+ " from stu,adr,adrph"
			+ " where nr = ?"
			+ " and nr=adr.reference_no"
			+ " and FK_ADRCATYPFK_ADRC =1"
			+ " and FK_ADRCATYPFK_ADRT =1"
			+ " and adrph.reference_no(+)=nr"
			+ " and FK_ADRCATCODE(+) = 1";

	private static final String studentEduloanQuery = "select "
			+ " loan_seq_nr,status,student_applicant,employer_code, "
			+ " organization_nr, "
			+ " emp_salary_nr, "
			+ " surname as surname2, "
			+ " initials as initials2, "
			+ " title as title2, "
			+ " identity_nr as ID2, "
			+ " loan_amount, "
			+ " to_char(apply_date,'YYYYMMDD') as Apply, "
			+ " apply_reg_office "
			+ " from edustu "
			+ " where mk_academic_year= ?"
			+ " and mk_student_nr = ?"
			+ " and loan_seq_nr = ?";

	private static final String studentPhysicalAddrQuery = "select "
			+ " address_line_1 as Addr1, "
			+ " ADDRESS_LINE_2 as Addr2, ADDRESS_LINE_3 as Addr3,"
			+ " ADDRESS_LINE_4 as Addr4,"
			+ " lpad(POSTAL_CODE,4,0) as Postal2 "
			+ " from adr "
			+ " where reference_no = ?"
			+ " and FK_ADRCATYPFK_ADRC =1"
			+ " and FK_ADRCATYPFK_ADRT =3";


	private String validateStudentNr(String studentNr, String ip)
			throws AxisFault {

		if (ip != null || !(ip.equals(""))) {
			usageSession = UsageSessionService.startSession(studentNr, ip,
					userAgent);
		}
		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());

		try {
			Integer.parseInt(studentNr);
		} catch (Exception e) {
			throw new AxisFault(
					"The student number you have entered is not valid.\n"
							+ "Please check and try again.");
		}

		try {
			List records = jdt.queryForList(validStudentQuery,
					new Object[] { new Integer(studentNr) },
					new int[] { Types.NUMERIC });
			if (records.size() == 0) {
				throw new Exception(
						"The student number you have entered is not valid.\n"
								+ "Please check and try again.");
			} else {
				if (ip != null) {
					return usageSession.getId();
				} else {
					return "";
				}
			}
		} catch (AxisFault af) {
			throw af;
		} catch (Exception e) {
			throw new AxisFault(e.getMessage());
		}

	}

	public String getStudentEduloan(String acadYear,String studentNr,String seqNr, String ip)
			throws AxisFault {

		String sessionId = validateStudentNr(studentNr, ip);

		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());
		Log log = LogFactory.getLog(this.getClass());


		String csv = "";

		try {

			List records = jdt.queryForList(studentBioQuery,
					new Object[] { new Integer(studentNr) },
					new int[] { Types.NUMERIC });

			Iterator recordsI = records.iterator();
			if (recordsI.hasNext()) {

				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = record.get("NR") + "~";
				csv = csv + record.get("SURNAME") + "~";
				csv = csv + record.get("INITIALS") + "~";
				csv = csv + record.get("MK_TITLE") + "~";
				csv = csv + record.get("IDENTITY_NR")+ "~";
				csv = csv + record.get("ADR1") + "~";
				csv = csv + record.get("ADR2") + "~";
				csv = csv + record.get("ADR3") + "~";
				csv = csv + record.get("ADR4") + "~";
				csv = csv + record.get("POSTAL") + "~";
				csv = csv + record.get("EMAIL") + "~";
				csv = csv + record.get("HOME") + "~";
				csv = csv + record.get("WORK") + "~";
				csv = csv + record.get("CELL") ;

			}



			List records2 = jdt.queryForList(studentEduloanQuery,
					new Object[] { new Integer(acadYear), new Integer(studentNr), new Integer(seqNr) },
					new int[] { Types.NUMERIC, Types.NUMERIC, Types.NUMERIC });

			recordsI = records2.iterator();
			while (recordsI.hasNext()) {
				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = csv + "~" + record.get("ID2") + ",";
				csv = csv + record.get("SURNAME2") + "~";
				csv = csv + record.get("INITIALS2") + "~";
				csv = csv + record.get("TITLE2") + "~";
				csv = csv + record.get("loan_amount")+ "~";
				csv = csv + record.get("apply")+ "~";
				csv = csv + record.get("employer_code")+ "~";
				csv = csv + record.get("organization_nr")+ "~";
				csv = csv + record.get("emp_salary_nr")+ "~";
				csv = csv + record.get("status")+ "~";
				csv = csv + record.get("apply_reg_office")+ "~";
			}

			List records3 = jdt.queryForList(studentPhysicalAddrQuery,
					new Object[] {new Integer(studentNr) },
					new int[] { Types.NUMERIC });

			recordsI = records3.iterator();
			while (recordsI.hasNext()) {
				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = csv + "~" + record.get("ADDR1") + "~";
				csv = csv + record.get("ADDR2") + "~";
				csv = csv + record.get("ADDR3") + "~";
				csv = csv + record.get("ADDR4") + "~";
				csv = csv + record.get("POSTAL2") + "~";
			}
			if ("".equals(csv)) {
				throw new Exception("No eduloan details found for student.");
			}
			return csv;

		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new AxisFault(e.getMessage());
		}
	}
}