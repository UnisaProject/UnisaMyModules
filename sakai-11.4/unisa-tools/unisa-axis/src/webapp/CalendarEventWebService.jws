import java.sql.Types;
import org.apache.commons.collections.map.ListOrderedMap;
import java.util.Iterator;
import java.util.List;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.JdbcTemplate;

import org.sakaiproject.event.cover.UsageSessionService;
import org.sakaiproject.event.api.UsageSession;
import org.sakaiproject.component.cover.ServerConfigurationService;

import za.ac.unisa.lms.db.StudentSystemDAO;
import za.ac.unisa.lms.db.SakaiDAO;

public class CalendarEventWebService {


   private static final String RETRIEVE_EXAM_EVENTS = "SELECT sunpdt.fk_suncode AS SU, xamdat.fk_nr AS PAPER_NO,"+
                        " TO_CHAR(date0,'YYYY') AS XYEAR,"+ 
                        " TO_CHAR(date0,'MM') AS XMONTH,"+  
                        " TO_CHAR(date0,'DD') AS XDAY, "+
                        " TO_CHAR(starting_time,'HH24') AS XHOUR,"+ 
                        " TO_CHAR(starting_time,'MI') AS XMINUTE, "+
                        " xamdat.duration_days ||' Days' AS XDAYS, "+
                        " xamdat.duration_hours ||' Hours' AS XHOURS, "+
                        " xamdat.duration_Minutes||' Minutes' AS XMINUTES , "+
                        " 'Final Timetable'"+
                        " FROM sunpdt, xamdat,xampap"+
                        " WHERE sunpdt.mk_academic_year ="+acadYearString+
                        " AND sunpdt.mk_academic_period = 1"+
                        " AND sunpdt.semester_period = "+acadSemString+
                        " AND sunpdt.fk_suncode = "+"'"+tmpStudyUnit+"'"+
                        " AND registration_allow = 'Y' "+ 
                        " AND xampap.exam_year = sunpdt.mk_exam_year "+
                        " AND xampap.mk_study_unit_code = sunpdt.fk_suncode"+
                        " AND xamdat.fk_exam_year = xampap.exam_year "+   
                        " AND xamdat.mk_exam_period_cod = sunpdt.mk_exam_period"+
                        " AND xamdat.fk_study_unit_code = xampap.mk_study_unit_code"+
                        " AND xamdat.fk_nr = xampap.nr"+
                        " AND TO_CHAR(date0,'YYYYMMDD') > ('19999999')"+
                        " AND EXISTS"+
                        " ( SELECT * FROM xaddon "+
                        " WHERE xaddon.mk_exam_year= xampap.exam_year "+
                        " AND xaddon.mk_exam_period= xamdat.mk_exam_period_cod "+
                        " AND xaddon.mk_exam_type_code= xampap.mk_exam_type_code"+
                        " AND xaddon.admission_done_flag= 'Y' ) "+  
                        " ORDER BY  TO_CHAR(date0,'YYYYMMDD'), TO_CHAR(starting_time,'HH24:MI'),sunpdt.fk_suncode";

	/** Retrieve exam and assignment events from student system and place them in the calendar tool
		Input:
			module = Module - either enter module code OR if for all modules enter ALL
			acadYear = Academic year
			semPeriod = Semester period
	*/
	public String getEvents(String module, int acadYear, int semPeriod)throws AxisFault {
	
		String result ="";

		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());
		Log log = LogFactory.getLog(this.getClass());

		module = "AFL1501";
		acadYear = 2018;
		semPeriod = 1;
		String examType="Exam";
		String fkNr = "1"

		try {

			List records;
			records = jdt.queryForList(RETRIEVE_EXAM_EVENTS,
					new Object[] {acadYear, semPeriod, modules});

			Iterator recordsIt = records.iterator();
			while (recordsIt.hasNext()) {

				ListOrderedMap record = (ListOrderedMap) recordsIt.next();
				String r_studyunit = record.get("SU").toString();
				String r_papernr = record.get("PAPER_NO").toString();
				String r_xyear = record.get("XYEAR").toString();
				String r_xmonth = record.get("XMONTH").toString();
				String r_xday = record.get("XDAY").toString();
				String r_xhour = record.get("XHOUR").toString();
				String r_xminute = record.get("XMINUTE").toString();
				String r_xdays = record.get("XDAYS").toString();
				String r_xhours = record.get("XHOURS").toString();
				String r_xminutes = record.get("XMINUTES").toString();
				boolean isReExam=false;
				
				System.out.println("exam: "+r_studyunit+" - "+r_papernr);
				createExamEvent(String module, String xday, String xmonth, String xyear,
					String xhour, String xminute,
					String xdays, String xhours, String xminutes, String fkNr, String examType, String exCentre,
					boolean isReExam);
					
			} // end of while recordsIt.hasNext()
				
				
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new AxisFault(e.getMessage());
		} // end try -catch Exception				
	
	} // end of getEvents


	/**
	 * Method: createExamEvent
	 * 		Create an event of the exam
	 * 		dateRange = YYYYMMDDHHMM00000]YYYYMMDDHHMM00000
	 * 					before ] = start time; after ] = end time
	 *
	 * @param studyUnit (ANH101P)
	 * @param examDate (YYYY-MM-DD)
	 * @param startHours (HH24)
	 * @param startMinutes (MM)
	 * @param durDays (DD)
	 * @param durHours (HH)
	 * @param durMinutes (MM)
	 * @param fkNr
	 * @param courseCycle (ANH101P-06-S1)
	 * @return list of all exam events, each event an xml String.
	 */
	public String createExamEvent(String courseCycle, String examDay, String examMonth, String examYear,
			String startHour, String startMinutes,
			String durDays, String durHours, String durMinutes, String fkNr, String examType, String exCentre,
			boolean isReExam) {

		String studyUnit = courseCycle.substring(0,7); 		// get studyUnit code from the courceCycle
		String examEvent = "";
		String endYear = "";
		String endMonth = "";
		String endDay = "";
		String endHH = "";
		String endMM = "";
		String duration = "";

		//Handle Null durDays, durHours and durMinutes
		
		if (durDays.equals("") || durDays == null || durDays.equals(" ")){
			durDays = "0";
		}
		if (durHours.equals("") || durHours == null || durHours.equals(" ")){
			durHours = "0";
		}		
		if (durMinutes.equals("") || durMinutes == null || durMinutes.equals(" ")){
			durMinutes = "0";
		}
		
		// set all variables to int
		int examYearInt = Integer.parseInt(examYear);
		int examMonthInt = Integer.parseInt(examMonth) -1; // month 0 is January for calendar
		int examDayInt = Integer.parseInt(examDay);
		int startHourInt = Integer.parseInt(startHour) - 2; // daterange, hours is 2 less than actual hour on schedule
		int startMinInt = Integer.parseInt(startMinutes);
		int durDaysInt =  Integer.parseInt(durDays);
		int durHoursInt = Integer.parseInt(durHours);
		int durMinutesInt = Integer.parseInt(durMinutes);

		/**
		 *  use java calendar function to manipulate date
		 *  */
		Calendar c1 = Calendar.getInstance();
		c1.set(examYearInt,examMonthInt,examDayInt,startHourInt, startMinInt);
		// add duration to calendar
		c1.add(Calendar.MINUTE,durMinutesInt);
		c1.add(Calendar.HOUR,durHoursInt);
		c1.add(Calendar.DATE,durDaysInt);

		// get the calculated end date from calendar
		endYear = c1.get(Calendar.YEAR)+"";
		endMonth = (c1.get(Calendar.MONTH)+1)+""; // month 0 is January for calendar, we want it to be 1
		endDay = c1.get(Calendar.DATE)+"";
		endHH = c1.get(Calendar.HOUR_OF_DAY)+"";
		endMM = c1.get(Calendar.MINUTE)+"";

		// set format of the variables
		if (endMonth.length() <= 1) {
			endMonth = "0"+endMonth;
		}
		if (endDay.length() <= 1) {
			endDay = "0"+endDay;
		}
		if (endHH.length() <= 1) {
			endHH = "0"+endHH;
		}
		if (endMM.length() <= 1) {
			endMM = "0"+endMM;
		}
		startHour = startHourInt+"";
		if (startHour.length() <= 1) {
			startHour = "0"+startHour;
		}

		// set duration variable
		if (durDaysInt > 0) {
			duration = durDaysInt + " days";
		}
		if (durHoursInt > 0) {
			duration = duration + " "+ durHoursInt+ " hours";
		}
		if (durMinutesInt > 0) {
			duration = duration + " "+durMinutesInt+" minutes";
		}

		// create date range
		String dateRange = "";
		dateRange = examYear+examMonth+examDay+startHour+startMinutes+"00000]";
		dateRange = dateRange+endYear+endMonth+endDay+endHH+endMM+"00000";

		String eventId = "";
		if (isReExam == true) {
			//eventId = "ss:r:1:"; // Sonette 20 March 2012: Change because if 2 exams then duplicate id, id should be unique
			eventId = "ss:r:"+fkNr+":";
		} else {
			//eventId = "ss:x:1:"; // Sonette 20 March 2012: Change because if 2 exams then duplicate id, id should be unique
			eventId = "ss:x:"+fkNr+":";
		}

		// create xml for exam event
		examEvent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
						   "<event access=\"site\" id=\""+eventId+courseCycle+"\" range=\""+dateRange+"\">" +
		                   "<properties>" +
                           "<property enc=\"\" name=\"CHEF:description-html\" value=\"These details are for information only.  " + 
		                   			"Final arrangements are published in the Examination Timetable tool.  Note that only the South " +
		                   			"African Standard Time Zone (SAST) is applicable.  Information relating to other time zones should " +
		                   			"be ignored. &lt;br/&gt; &lt;br/&gt;"+
		                   			"Examination of "+studyUnit+" - "+examType+" "+fkNr+
                           			".  Duration: "+duration+".  " +
                           			"Final examination timetables will be sent to students by post prior to the examination\"/>"+
                           "<property enc=\"\" name=\"CHEF:calendar-location\" value=\""+exCentre+"\"/>" +
                           "<property enc=\"BASE64\" name=\"CHEF:calendar-type\" value=\""+EXAM+"\"/>" +
                           "<property enc=\"\" name=\"CHEF:description\" value=\"aa"+examType+" "+fkNr+", Duration: "+duration+". " +
                           		"Final examination timetables will be sent to students by post prior to the examination\"/>" +
                           "<property enc=\"\" name=\"DAV:displayname\" value=\"Exam: "+studyUnit+"\"/>" +
                           "</properties>" +
                           "</event>";
		
		System.out.print(examEvent+"\n\n");

		return (examEvent);

	}


} // end of CalendarEventWebService