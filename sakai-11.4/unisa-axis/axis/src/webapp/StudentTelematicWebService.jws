import java.sql.Types;
import org.apache.commons.collections.map.ListOrderedMap;
import java.util.Iterator;
import java.util.*;


import org.apache.axis.AxisFault;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.core.JdbcTemplate;

import org.sakaiproject.event.cover.UsageSessionService;
import org.sakaiproject.event.api.UsageSession;

import za.ac.unisa.lms.db.StudentSystemDAO;


public class StudentTelematicWebService {


	public String userAgent = "Student Details";

	private UsageSession usageSession;

	private static final String validStudentQuery = "select 1 from stu where nr = ?";

	private static final String studentBioQuery = "select nr,surname,first_names,mk_title,gender,"
			+ " email_address as Email,"
			+ " cell_number as Cell "
			+ " from stu,adrph"
			+ " where nr = ?"
			+ " and adrph.reference_no(+)=nr"
			+ " and FK_ADRCATCODE(+) = 1";

	private static final String studentRegionQuery = "select "
			+ " regoff.code as Region" + " from stu,ldd,regoff" + " where nr = ?"
			+ " and fk_lddcode = ldd.code "
			+ " and mk_region_code = regoff.code";

	private static final String studentsPerModuleQuery = "select "
			+ " fk_student_nr,first_names,surname,mk_title,gender,"
			+ " regoff.eng_description as Centre, "
			+ " cell_number as Cell, "
			+ " email_address as Email "
			+ " from stusun,stu,adrph, ldd, regoff"
			+ " where mk_study_unit_code = ?"
			+ " and fk_academic_year = ?"
			+ " and fk_academic_period = 1"
			+ " and semester_period = ?"
			+ " and status_code = 'RG'"
			+ " and fk_student_nr = nr"
			+ " and mk_country_code = '1015'"
			+ " and fk_lddcode = ldd.code "
			+ " and mk_region_code = regoff.code "
			+ " and adrph.reference_no = nr"
			+ " and FK_ADRCATCODE = 1"
			+ " order by surname, first_names, fk_student_nr";


	private static final String modulesListQuery = "select "
			+ " code as Module, "
			+ " semester_period as Semester, "
			+ " eng_short_descript as Description "
			+ " from sun, sunpdt "
			+ " where formal_tuition_fla = 'F' "
			+ " and academic_level = 'U' "
			+ " and mk_academic_year = ? "
			+ " and mk_academic_period = 1 "
			+ " and code = sunpdt.fk_suncode "
			+ " order by Module, Semester";


	private String validateStudentNr(String studentNr, String ip)
			throws AxisFault {

		if (ip != null || !(ip.equals(""))) {
			usageSession = UsageSessionService.startSession(studentNr, ip,
					userAgent);
		}
		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());

		try {
			Integer.parseInt(studentNr);
		} catch (Exception e) {
			throw new AxisFault(
					"The student number you have entered is not valid.\n"
							+ "Please check and try again.");
		}

		try {
			List records = jdt.queryForList(validStudentQuery,
					new Object[] { new Integer(studentNr) },
					new int[] { Types.NUMERIC });
			if (records.size() == 0) {
				throw new Exception(
						"The student number you have entered is not valid.\n"
								+ "Please check and try again.");
			} else {
				if (ip != null) {
					return usageSession.getId();
				} else {
					return "";
				}
			}
		} catch (AxisFault af) {
			throw af;
		} catch (Exception e) {
			throw new AxisFault(e.getMessage());
		}

	}

	public String getStudent(String studentNr, String ip)
			throws AxisFault {

		String sessionId = validateStudentNr(studentNr, ip);

		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());
		Log log = LogFactory.getLog(this.getClass());


		String csv = "";

		try {

			List records = jdt.queryForList(studentBioQuery,
					new Object[] { new Integer(studentNr) },
					new int[] { Types.NUMERIC });

			Iterator recordsI = records.iterator();
			if (recordsI.hasNext()) {

				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = record.get("NR") + "|";
				csv = csv + record.get("FIRST_NAMES") + "|";
				csv = csv + record.get("SURNAME") + "|";
				csv = csv + record.get("MK_TITLE")+ "|";
				csv = csv + record.get("GENDER") + "|";
				csv = csv + record.get("EMAIL") + "|";
				csv = csv + record.get("CELL") ;

			}



			List records2 = jdt.queryForList(studentRegionQuery,
					new Object[] { new Integer(studentNr) },
					new int[] { Types.NUMERIC });

			recordsI = records2.iterator();
			while (recordsI.hasNext()) {
				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = csv + "|" + record.get("REGION") ;
			}
			if ("".equals(csv)) {
				throw new Exception("No biographical details found for student.");
			}
			return csv;

		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new AxisFault(e.getMessage());
		}
	}

	public String[] getStudents(String moduleCode, String yearRequested, String semesterPeriod) throws AxisFault {

		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());
		Log log = LogFactory.getLog(this.getClass());

		ArrayList list = new ArrayList();
		String csv = "";

		try {

			List records = jdt.queryForList(studentsPerModuleQuery,new Object[] { new String(moduleCode), new String(yearRequested), new String(semesterPeriod) },
			new int[] { Types.VARCHAR, Types.VARCHAR, Types.VARCHAR });

			Iterator recordsI = records.iterator();
			while (recordsI.hasNext()) {

				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = "";
				csv = csv + record.get("FK_STUDENT_NR") + "|";
				csv = csv + record.get("FIRST_NAMES") + "|";
				csv = csv + record.get("SURNAME") + "|";
				csv = csv + record.get("MK_TITLE")+ "|";
				csv = csv + record.get("GENDER") + "|";
				csv = csv + record.get("CENTRE") + "|";
				csv = csv + record.get("CELL") + "|";
				csv = csv + record.get("EMAIL") + "|";
				list.add(csv);
			}

			if(list.isEmpty()){
				throw new Exception("No students found for list.");
			}

			// Convert ArrayList to String Array
			String[] result = new String[list.size()];
			list.toArray(result);

			return result;

	} catch (Exception e) {
		e.printStackTrace();
		log.error(e);
		throw new AxisFault(e.getMessage());
	}
}

	public String[] getTelematicModules(String yearRequested) throws AxisFault {

		JdbcTemplate jdt = new JdbcTemplate(new StudentSystemDAO()
				.getDataSource());
		Log log = LogFactory.getLog(this.getClass());

		ArrayList list = new ArrayList();
		String csv = "";

		try {

			List records = jdt.queryForList(modulesListQuery,
			new Object[] { new String(yearRequested) },
			new int[] { Types.VARCHAR });

			Iterator recordsI = records.iterator();
			while (recordsI.hasNext()) {

				ListOrderedMap record = (ListOrderedMap) recordsI.next();
				csv = "";
				csv = csv + record.get("MODULE") + "|";
				csv = csv + record.get("SEMESTER") + "|";
				csv = csv + record.get("DESCRIPTION") + "|";
				list.add(csv);
			}

		if(list.isEmpty()){
			throw new Exception("No modules found for year.");
		}

		// Convert ArrayList to String Array
		String[] result = new String[list.size()];
		list.toArray(result);

		return result;

	} catch (Exception e) {
		e.printStackTrace();
		log.error(e);
		throw new AxisFault(e.getMessage());
	}
}

}

